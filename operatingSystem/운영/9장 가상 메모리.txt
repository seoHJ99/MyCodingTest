가상 메모리
요청 페이징(Demand Paging)
실제로 필요한 시점에 page를 메모리에 올리는 것.
 i/o양 감소
 memory 사용량 감소 
 빠른 응답시간
 더 많은 사용자 수용
vaild/invalid bit 의 사용
 invalid의 의미
  -사용되지 않느 주소 영역인 경우
  -페이지가 물리적 메모리에 없는 경우
 처음에는 모든 page entry가 invalid로 초기화
 address translation 시에 invalid bit이 set되어 있으면 => page fault

page fault
invalid page 에 접근하면 MMU가 trap을 발동시킴(page fault trap)
kernel mode 로 들어가서 페이지 펄트 핸들러가 호출됨.
아래의 순서로 처리
1. invalid 의 이유를 파악(잘못된 주소, 보안 이슈 등)
2. 빈 페이지 프레임을 얻어옴. 없으면 뺏어옴
3. 해당 페이지를 disk에서 memory로 읽어옴
   1. disk i/o가 끝나기까지 이 프로세스는 cpu를 preempt당함(block)
   2. 읽기가 끝나면 page tables entry 기록. vaild/ invalid bit = valid
   3. ready queue에 프로세스를 insert
4.  이 프로ㅔ스사가 cpu를 잡고 다시 running
5. 중단된 작업 재개

여유 frame이 없을때
page replacement : 어떤 frame을 뺏어와서 할당하는 작업. 곧바로 사용되지 않을 page를 쫓아내는 것이 좋음.
relapcement algorithm : page-fault rate을 최소화하는 것이 묙표
  알고리즘의 평가 : 주어진 page regrence string에 대해 page fault를 얼마나 내는지 조사.
reference string의 예 : 1,2,3,4,1,2,5 ... 1번 페이지 참조, 2번 페이지 참조, 3번,  4번, 1번... 이런 의미
victim이 결정되면 삭제 혹은 쫓아냄. 만약 기존의 내용과 달라졌다면 디스크의 내용을 수정, 수정 사항이 없다면 그냥 메모리에서 삭제. 그리고 valid/invalid bit을 변경.

optimal algorithm : 최적의 알고리즘이나 동시에 프로그램 시작 전 reference string을 알고 있다는 가정, 즉 미래를 안다는 것이 전제이기 때문에 비현실적. 가장 먼 미래에 참조되는 page를 replace하는 방식. 다른 알고리즘의 성능에 대한 upper bound  제공. 즉, 최상의 시나리오를 보여줌으로서 기준점을 제공함.

FIFO algorithm
first in first out 방식.
FIFO Anormaly : 메모리 크기를 늘리면 성능이 나빠질수도 있는 현상.  

LRU algorithm
least recently use 방식. 최근 오래 전에 참조된 것을 지움.

LFU algorithm
least frequetly used 방식. 가장 참조 횟수가 적은 페이지를 지움.
  최저 참조 횟수인 page가 여럿인 경우엔 임의로 선정. 성능 향상을 위해 오래전에 참조된 page를 지우게 구현할수도 있다.

LRU와 LFU알고리즘 구현
1. LRU
링크드 리스트를 통해 페이지를 사용 순서대로 나열
1,2,3,4,5
이때 2가 사용되면 이를 가장 뒤로 보냄
1,3,4,5,2
그리고 삭제할때는 가장 앞의것을 지움
3,4,5,2
이때 시간 복잡도는 O(1).

2. LFU
heap을 이용해서 구현
heap은 이진 트리 형태. 맨 위에는 참조횟수가 가장 적은 페이지, 아래로 갈수록 점점 많아짐.
그래서 본인의 자식 2개하고만 본인을 비교. 자식보다 본인의 참조 횟수가 더 크면 자리 바꾸는 방식.
O(logN) 의 복잡도.