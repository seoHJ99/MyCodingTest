
추상자료형 : 오브젝트와 오퍼레이션으로 구성. 논리적으로 정의되지 컴퓨터에서 구현되는 거소가는 별개.

semaphores
역시 일종의 추상 자료형
자원의 숫자를 의미하는 정수값을 가짐.
두가지 atomic연산에 의해서만 접근 가능
사용 이유: 락을 락을 푸는 것을 간단하게 함. 공유 자원을 획득하고 반납하는 것을 처리.
P(S) : 공유 데이터를 획득하는 연산. 정수값이 5개면 5번 연산함.
 while(S <= 0) do no-op;  -- 의미. S가 음수면(자원이 없으면) 아무일도 안하고 대기. 양수면(자원을 내놓으면) 연산.
 S--;                             -- 연산이 끝나면 자원 하나 뺌.

자원이 없을때 busy wait문제가 생길수 있음.

V(S) : 공유 데이터를 반납하는 연산
 S++;

크리티컬 섹션에 적용
semaphore mutex  /* initially 1 : 1개가 cs에 들어갈수 있다.*/

processor p1
do{
    P(mutex);
    critical section
    V(MUTEX);
    remainder section
}while(1);
사용자가 직접 크리티컬 섹션에 접근하기 위한 코드를 추상화하여 자료형으로 사용하면 훨씬 효율적이기에 등장한 개념.
busy-wait는 효율적이지 못함(= spin lock)
block & wakeup 방식의 구현 (= sleep lock)

block / wakeup 시행
Semaphore를 다음과 같이 정의
typedef struct
{   int value;             /* semaphore*/  -- 실제 세마포어 값
    struct process L;    /* process wait queue*/  -- 잠들어있는 프로세스들을 연결시키기 위한 일종의 큐
} semaphore

block과 wakeup을 다음과 같이 가정
block : 커널은 block을 호출한 프로세스를 suspend시킴. 이 프로세스의 PCB를 semaphore에 대한 wait queue에 넣음
wakeup(P) : block된 프로세스 p를 wakeup시킴. 이 프로세스의 PCB를 ready queue로 옮김.
세마포어를 획득할수 없으면 해당 프로세스를 블록 시킴, 누군가 세마포어 변수를 반납하면 프로세스를 깨워서 일을 시킴. 세마포어를 기다리는 큐.

구현
P(S):
S.value--;
if(S.value<0)                     --세마포어 변수값이 음수면 자원의 여분이 없다는 의미.
{   
    add this process to S.L;   --S.L이라는 새마포어 대기열 큐에 넣고
    block();                       -- 블록 상태로 만듬.
}

V(S):  
S.value++;                            -- 프로세스가 다 쓰면 자원값 1 증가.
if(S.value <=0)                    -- 내가 자원값을 내놨는데도 0이하 = 누군가가 대기열로 들어가면서 -1 연산을 하였음 = 프로세스 깨워야 함
{
    remove a process P from S.L;
    wakeup(P);
}

여기서 S.value는 이전과 다르게 자원의 개수값을 의미하기 보다는 음수면 누군가 자원을 기다리고 있다는 의미로 쓰임.

busy-wait    vs    block/wakeup
일반적으로는 block/wakeup을 사용
그러나 block/wakeup을 하는데도 overhead가 존재하기에 critical section길이가 짧으면 busy-wait을 사용하기도 함

두가지 종류의 세마포어
counting semaphore
도메인이 0 이상인 임의의 정수값.
주로 resource counting 에 사용.
binary semaphore(=mutex)
0 또는 1값만 가질수 있는 semaphore
주로 mutaual exclusion(lock/unlock)에 사용 

사용시 주의점
dedlock : 둘 이상의 프로세스가 서로 상대방에 의해 충족될수 있는 event를 무한히 기다리는 현상.
두개의 프로세스가 각각 a,b의 자원이 필요한데, 첫번째 프로세스의 세마포어가 a자원을 획득한 다음 cpu가 두번째 프로세스로 넘어가 두번째 프로세스 세마포어가 b를 획득한다고 가정. 첫번째와 두번째 모두 다른 프로세스가 완료되어 자원을 해제하기를 기다리고만 있음.
해결법 : 두 프로세스가 순서상 같은 자원을 획득하게 한다. 즉, 둘다 a자원을 먼저, 다음에 b자원을 획득하게 하면 첫번째 프로세스가 작업을 마치고 두번째 프로세스로 자원이 넘어간다.
starvation : indefinite blocking : 프로세스가 suspend된 이유에 해당하는 세마포어 큐에서 빠져나갈수 없는 현상. 특정 프로세스들만 자원을 공유하여 다른 프로세스들은 자원을 획득하지 못하는 문제. 데드락도 일종의 스타베이션이라고 볼 수 있음.

식탁의 철학자 문제
원형 탁자에 사람 5명, 5개의 젓가락이 존재(쌍이 아님).
데드락은 전부다 젓가락을 하나씩만 들고 있으면서 누군가 내려놓길 기다리는 상태.
스타베이션은 누군가는 끝까지 젓가락 두개를 얻지 못하는 문제.
