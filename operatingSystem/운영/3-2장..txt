동기식 입출력과 비동기식 입출력
동기식 : 프로세스가 i/o 요청한뒤, 프로세스가 입출력의 응답을 기다려야 함
비동기식 : 입출력의 응답이 오지 않아도 뭔가를 한다면 비동기식. cpu를 붙잡고 있지 않아도 됨.

쓰레드(thread)
같은 프로세스 여러개를 실행할때, 프로세스 주소 공간의 코드, 데이터는 공유하면서 실행 함수를 나타나내느 스택만 별도로 운영하는 방식. pcb 역시 레지스터와 프로그램 카운터(프로그램 실행 단계를 나타냄)만 별도로 운영. 레지스터와 pc는 cpu관련 정보이기 때문
thread : cpu를 실행하는 단위
 프로그램 카운터, 레지스터 셋, 스택 공간만 독립적으로 가짐
 코드 공간, 데이터 공간, os 자원은 쓰레드들끼리 공유함. 공유 공간을 (task라고 함)
쓰레드로 관리되는 프로세스는 라이트 웨이트 프로세스, 전통적인 프로세스는 헤비 웨이트 프로세스
장점 : 다른 쓰레드가 blocked 인 상태일대 동일 테스크내 다른 스레드가 러닝상태가 되어 빠르게 처리 가능
        예) 웹 페이지에서 네트워크(i/o)를 통해 그림 데이터를 받아오는 동안 또 다른 스레드가 화면을 보여준다던지, 글자를 받아온다든지 하는 일을 함.
         동일한 일을 하는 하는 다중 스레드가 협력하여 메모리 낭비를 없앰. 즉, 처리율과 성능 향상을 높임.
         병렬성을 높일수 있다.
즉, 자원은 공유, cpu 정보는 독립
장점 : 응답성이 빠름. 예를 들어 네트워크 요청한 경우, html 받아오는데 시간이 오래 걸려 해당 스레드는 blocked가 되지만 다른 쓰레드가 받아온만큼의 html을 미리 보여줌. i/o결과와 상관없이 진행됨으로 비동기식
         자원을 공유함. 코드, 데이터, 그외의 각종 자원을 공유함.
         경제성. 즉 프로세스를 만들고 문맥 교환이 일어날때 자원 소모와 부담이 적음. 그래서 빠름.
         cpu가 여러개인 컴퓨터에서는 병렬적으로 실행 가능.
구현법
커널 쓰레드와 유저 쓰레드로 구분.
커널 : 쓰레드가 여러개 있는 것을 운영체제가 알고 있어서 커널이 쓰레드 관리.
유저 : 프로세스 안에 쓰레드가 여러개 있는 것을 운영체제는 모름. 유저 프로그램이 스스로 라이브러리의 지원을 받아 이를 관리함. 커널 입장에서는 일반적인 프로세스.