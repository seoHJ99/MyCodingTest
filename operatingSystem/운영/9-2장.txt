다양한 캐슁 환경
캐슁 기법
  한정된 빠른 공간(= 캐쉬) 에 요청된 데이터를 저장해 두었다가 후속 요청시 캐쉬로부터 직접 빠르게 서비스하는 방식.
  paging system외에도 cache memory, buffer caching, web caching 등 다양한 분야에서 활용
  상황에 따라 캐쉬 공간이 느린 공간이 될수도 있음.
캐쉬 운영의 시간 제약
  교체 알고리즘에서 삭제할 항목을 결정하는 일에 지나치게 많은 시간이 걸리는 경우 실제 시스템에서 사용할수 없음.
  buffer caching 이나 web caching 의 경우
    O(1) 에서 O(log n) 정도까지 허용
  paging system 인 경우
    page fault인 경우에만 os가 관여함
    페이지가 이미 메모리에 존재하는 경우 참조시각 등의 정보를 os가 알수 없음
    O(1)인 LRU의 list조작조차 불가능
즉, 지난 시간에 말한 페이징 시스템의 알고리즘은 실제로는 사용이 불가능함. 이유는 주소 변환 과정에서 os가 관여하지 않기에, 언제 어떤 page가 사용됬는지 os가 파악 불가능하기 때문.
그래서 대신 LRU를 대체하기 위해 Clock Algorithm 사용.

Clock Algorithm
LRU의 근사 알고리즘. rEFERENCE BIT을 사용해서 교체 대상 페이지를 선정하는 방식. Reference bit 이 0인 것을 찾을때까지 포인터를 하나씩 앞으로 이동. 찾으면 그 페이지를 교체. 레퍼런스 비트가 1이면 최근 사용됨, 0이면 아님을 의미.
한바퀴 되돌아와서도(=second chance) 0이면 그때는 replace당함.
자주 사용되는 페이지라면 second chance가 올때 1
하드웨어가 어떤 page가 주소변환이 되어 cpu가 사용될때 레퍼런스 비트를 1로 설정. 이후 os가 비트가 1인 것을 0으로 바꾸고, 0인 것을 만나면 쫓아내고 새로운 page를 적재시킴.
최근에 사용되지 않은 page를 쫓아내는 방식.

clock algorithm의 개선
reference bit과 modified bit을 함께 사용.
 modified bit : 최근에 변경된 페이지(I/O를 동반하는 페이지)
읽기가 발생한 경우에는 reference bit만 1, 쓰기도 발생한 경우에는 modified bit까지 1로 변경. 그리고 수정됬다면 디스크의 내용을 바꿔치기 하고, 읽기만 발생했다면 그냥 메모리의 데이터만 삭제하는 방식.

page frame의 allocation
allocation problem : 각 프로세스에 얼만큼의 page frame을 할당할 것인가?
allocation의 필요성 
  메모리 참조 명령어 수행시 명령어, 데이터 등 여러 페이지 동시 참조.
     명령어 수행을 위해 최소한 할당되어얗 하는 frame의 수가 있음.
  loop를 구성하는 page들은 한꺼번에 allocate되는 것이 유리함.
     최소한의 allocation이 없으면 매 loop마다 page fault

allocation scheme
  equal allocation : 모든 프로세스에게 똑같은 개수 할당
  proportional allocation : 프로세스 크기에 비례하여 할당
  priority allocation : 프로세스의 priority에 따라서 할당

global replacement VS local replacement
글로벌 : rplace시 다른 프로세스에 할당된 프레임을 빼앗아 올 수 있다. 프로세스별 할당량을 조절하는 또다른 방법. 일괄적인 알고리즘 적용.
로컬 : 자신에게 할당된 프레임 내에서만 replace 가능. 각 프로세스 별로 알고리즘 운영

Thrashing
메모리에 프로세스가 하나 올라와있는 것보다 다수가 올라와 있어야 i/o시간동안 cpu가 놀지 않고 cpu를 최대 효율로 사용 가능함. 그러나 프로세스가 너무 많아지만 프로세스를 실행하기 위한 최소한의 메모리도 얻지 못하게 되기에 어떤 프로세스에게 cpu를 주더라도 page fault가 발생하기에 cpu 사용량이 갑자기 확 떨어지는 현상이 발생. 이를 쓰레슁이라고 함.
프로세스가 수행에 필요한 최소한의 page frame수를 할당받지 못한 경우 발생.
page fault rate가 매우 높아짐.

working-set model
Locality of reference
  프로세스는 특정 시간동안 일정 장소만을 집중적으로 참조(사용)한다. 집중적으로 참조되는 해당 page들의 집합을 locality set이라고 함.
Working-set Model
  Locality에 기반하여 프로세스가 일정 시간동안 원활하게 수행되기 위해 한꺼번에 메모리에 올라와 있어야 하는 page들의 집합을 working set이라고 정의함.
  working set모델에서는 프로세스의 working set전체가 메모리에 올라와있어야 수행되고 그렇지 않을 경우 모든 frameㄷ을 반납한 후 swap out(suspend)됨. thrashing을 방지함.
working-set algorithm
working set window를 통해 알아냄.
과거 특정 시간때부터 현재까지 사용된 page들을 working set으로 간주하고 해당 page들을 무조건 메모리에 유지하는 방식. 이때 과거에 사용된 page의 개수를 window size라고 함.
만약 어떤 프로세스가 5개의 frame이 필요한데 2개가 모자르다고 하면 해당 프로세스는 이미 할당받은 3개의 frame도 반납하고 suspend에 들어감.

PFF(page-fault frequency) scheme
page-fault rate의 상한값과 하한값을 둔다.
  page fault rate 가 상한값을 넘으면 frame을 더 할당한다.
  page fault rate 가 하한값 아래면 할당된 frame수를 더 줄인다.
빈 frame이 없으면 일부 프로세스를 swap out

page size를 결정하는 방법
page size를 감소시키면
 페이지 수 증가.
 페이지 테이블 크기 증가.
 internal fragmentation 감소
 disk transfer의 효율성 감소.
  seek/rotation VS transfer
  일반적으로 메모리는 인접한 공간이 현재 참조되고 있는 공간 이후에 참조될 확률이 높음. 그런데 너무 작게 page를 쪼개면 자주 page fault발생하게 됨.
 필요한 정보만 메모리에 올라와 메모리 이용이 효율적
  locality의 활용 측면에서 좋지 않음.
32bit 운영체제에서는 4kb가 일반적으로 사용됨