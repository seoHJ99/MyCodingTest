파일 시스템
file : 비휘발성 보조기억장치에 저장되는 논리적 단위. 운영체제는 다양한 저장 장치를 file이라는 논리적 단위로 볼수 있게 해줌
  operation
     create, read, write, repostion(lseek)(파일을 읽거나 쓸때 어느 위치인지 재설정하는 연산), delete, open(파일의 메타데이터를 메모리에 올리는 작업), close 등
file attribute(혹은 파일의 metadata) : 파일 자체의 내용이 아니라 파일을 관리하기 위한 각종 정보들.
  파일 이름, 유형, 저장된 위치, 파일 사이즈
  접근 권한(읽기/쓰기/실행), 시간(생성/변경/사용), 소유자 등.
file system
  운영체제에서 파일을 관리하는 부분.
  파일 및 파일의 메타 데이터, 디렉토리 정보 등을 관리.
  파일의 저장 방법 결정

directory
파일의 메타데이터 중 일부를 보관하고 있는 일종의 특별한 파일
그 디렉토리에 속한 파일 이름 및 파일 attribute들
operation
  search for a file, create a file, delete a file
  list a deirectory, rename a file, traverse the file system

partition(=logical dist)
하나의 (물리적) 디스크 안에 여러 파티션을 두는게 일반적
여러개의 물리적인 디스크를 하나의 파티션으로 구성하기도 함
(물리적)디스크를 파티션으로 구성한 뒤 각각의 파티션에 file system을 깔거나 swapping등 다른 용도로 사용할수 있음.

연산
open()
파일의 메타데이터를 메모리에 올리는 연산. 
ex) fd = open("a/b")
  사용자 메모리 영역에 프로세스가 올라가져서 opne("a/b")코드가 올라가져서 실행.
  root의 메타데이터, 즉 디렉토리 파일의 메터데이터가 커널 메모리 영역에 올라가짐.
  root의 메타데이터를 이용해서 디스크에 존재하는 root의 content를 찾아감.
  root 밑에 a가 존재하기에 root의 content내부에는 a의 메타데이터가 존재.
  a의 메타데이터가 메모리에 적재되고 이를 이용해서 a의 콘텐츠 조회, 그곳에는 또 하위 파일 b의 메타데이터가 존재.
  b의 메터데이터를 메모리에 적재. 이로서 open연산 끝.
  해당 프로세스 PCB내부에는 프로세스가 오픈한 파일들의 메타데이터 위치가 배열처럼 생성되는데([root,a,b]), "b"라는 파일의 인덱스 순서가 파일 디스크립터가 되어 이 값을 리턴한다.
따라서 사용자는 fd값만을 이용해서 b의 값에 빠르게 접근 가능하게 된다.
(os 메모리 영역에 metadata를 저장하고 있는 공간을 system-wide open file table 이라고 함)
(같은 파일에 접근한다고 하더라도 접근하고 있는 위치는 다를수 있기때문에 프로그램마다 접근 위치 오프셋을 가르키는 테이블이 하다 더 필요하다)

read()
open()연산을 통해 얻은 파일 디스크립션 이용해 내용물을 처음부터 읽어온다. (per-process file descriptor table에서 디스크립션을 읽어옴)
먼저 os가 자신의 메모리 공간 일부에 내용물의 일부를 읽은 다음 그것을 카피하여 프로세스 메모리영역에 전달해준다. 이후 다른 프로그램, 또는 같은 프로그램 동일한 위치의 동일한 내용물을 요구하는 시스템 콜이 일어나면 복사해둔 os의 내용물을 전달해둔다. 이것이 buffer cache다.

파일 접근 권한(file protection)
각 파일에 대해 누구에게 어떤 유형의 접근을 허락할 것인가?
Access Control Matrix
 표를 만들어 어떤 사용자가 어떤 파일에 어떤 권한이 있는지 기록하는 발상에서 시작. 표는 공간 낭비가 심하기에 다른 방식으로 구현
  1. linked list로 구현. access control list : 파일별로 누구에게 어떤 접근 권한이 있는지 표시
  2. linked list 로 구현. capability : 사용자별로 자신이 접근 권한을 가진 파일 및 해당 권한 표시
이를 사용해도 오버헤드가 커서 일반적으로 grouping을 사용함.
Grouping
 전체 user를 owner, group, public의 세 그룹으로 구분
 각 파일에 대해 세 그룹의 접근권한(rwx)를 3비트씩으로 표시, 총 9비트.

Password
 파일마다 password를 두는 방법(디렉토리 파일에 두는 방법도 가능)
 모든 접근권한에 대해 하나의 password: all or nothing
 접근 권한별 password : 암기 문제, 관리 문제

file system 의 mounting
mounting : 자신의 파티션이 아닌 다른 파티션의 파일에 접근하기 위한 연산. 다른 파티션의 root 디렉토리를 현재 내가 있는 위치에 가져다 붙이는 방식. 트리 형태의 타 파티션을 그대로 가져와 현재 내가 있는 나무가지에 가져다 붙인다고 생각하면 편함.

access methods
순차접근
  카세트 테이를 사용하는 방식처럼 접근.
  읽거나 쓰면 offset은 자동적으로 증가.
  a -> b -> c -> d 식으로 뒤의 내용물에 접근하기 위해서는 앞의 내용물도 모두 접근해야 함.
직접접근
  LP 레코드판과 같이 접근하도록 함
  파일을 구성하는 레코드를 임의의 순서로 접근할수 있음.
  관리 방식에 따라서 순차접근만 가능하도록 하게 할 수 있음