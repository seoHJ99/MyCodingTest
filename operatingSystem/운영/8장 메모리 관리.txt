메모리관리
메모리는 주소로 관리됨
주소는 논리적 주소와 물리적 주소로 나뉨.
논리적 주소(가상 주소) : 프로세스마다 독립적으로 가지는 주소 공간. 각 프로세스마다 0번지부터 시작. cpu가 보는 주소
물리적 주소 : 메모리에 실제 올라가는 위치
논리적 주소 -> 물리적 주소로 올라가는 그 과정이 주소 바인딩. 주소를 결정하는 것.
symbolic address : 프로그래머가 사용하는 심볼로 된 어드레스. 예) int a = 10;같은 것.

주소 바인딩
컴파일 타임 바인딩, 로드 타임 바인딩, 익스큐션 타임 바인딩
컴파일 타임 : 물리적 메모리 주소가 컴파일시 정해짐. 논리 주소가 물리적 주소가 됨. 컴파일 타임 시점에 정해져야 하기에. 컴파일 타임 바인딩에 의해 만들어진 코드를 absolute code 라고 말함. 위치를 바꾸고자 하면 다시 컴파일 필요.
로드 타임 : 실행이 시작될 시 loader의 책임하에 물리적 메모리 주소 부여. 메모리에 올라갈때 물리적 주소가 결정. relocatable code 라고 부르며 컴파일러가 재배치 가능함을 의미.
익스큐션 : 수행이 시작된 이후에도 프로세스의 메모리상 위치 옮길수 있음. 실행 도중 물리적 주소가 바뀔수 있음. 현재 컴퓨터 시스템. cpu가 주소를 참조할때마다 binding을 점검. 하드웨어적인 지원이 필요(MMU).
cpu는 논리적 주소를 본다. 왜냐하면 컴파일된 코드의 주소에는 로지컬 주소로 되어있기 때문.

MMU((memory-management unit)
논리적 메모리 주소를 물리적 메모리 주소로 매핑해주는 디바이스
relocation register 와 limit register 로 이뤄져있음. cpu가 특정 메모리 주소의 요청할때(36번), mmu는 프로그램이 올라가있는 시작위치의 메모리 주소(100번)에 더한 주소값의 데이터(136번)으로 응답한다.
limit register는 프로세서의 최대 크기를 알고 있기에 자기 프로그램이 아닌 다른 데이터를 요청하는 것을 막을수 있음.
cpu요청이 들어오면 먼저 limit register 의 값 이하인지 체크하고, 그 이후 relocation register 을 이용해 주소 변환해 옳은 값 리턴.
MMU scheme :  사용자 프로세스가 cpu에서 수행되며 생성해내는 모든 주소값에 대해 base register(=relocation register) 의 값을 더한다.
유저 프로그램은 오직 논리적 주소만 다룬다.

Dynbamic Loading
프로세스 전체를 메모리에 미리 다 올리는 것이 아니라 해당 루틴이 호출될 때 메모리에 load하는 것.
memory utilization의 향상.
오류 처리같은 가끔씩 사용되는 많은 양의 코드의 경우 유용. 운영 체제의 특별한 지원 없이 프로그램 자체에서 구현 가능(os는 라이브러리를 통해 지원 가능). 본래는 프로그래머가 명시적으로 메모리를 관리해야 다이나믹 로딩이고, 운영체제가 알아서 해주는 것은 페이징임.
loading : 메모리에 올리는 것.

Overlays
메모리에 프로세스의 부분 중 실제 필요한 정보만을 올림.
다이나믹 로딩과 똑같으나 개발자가 훨씬 더 정교하고 깊게 라이브러리 없이 코드를 짜는 것을 말함.
프로세스의 크기가 메모리보다 클 때 유용.
초창기에 메모리 크기가 작을때 프로그래머가 직접 구현했음.
코드가 매우 복잡해짐.
Manual Overlay 라고 불림.

Swapping
프로세스를 일시적으로 메모리에서 쫓아내 backing store(디스크)로 보내는 것.
swap out : 쫓아냄
swap in : 다시 부름.
 일반적으로 중기 스케줄러에 의해 swap out 시킬 프로세스 선정
 cpu우선순위가 낮은 프로세스를 swapped out 시키고 높은 프로세스를 불러들임.
 런타임 바인딩이 지원되어야 효율적으로 스와핑 가능. 나머지 바인딩은 반드시 원래 주소에 올려야하기에 비효율적.
 swap time은 대부분 transfer time ( 메모리에 데이터를 전송하는 시간) 임. swap되는 양에 비례하는 시간.
 프로그램의 일부만 쫓겨나도 swap out이라고 표현하기도 하지만, 원칙적으로는 프로그램 전부가 쫓겨나는 것을 말함.

Dynamic Linking
Linking을 실행하는 시간까지 미루는 기법
Linking : 여러군데 존재하는 컴파일된 파일들을 묶어 하나의 파일로 만드는 것 (예: 라이브리라 사용).
static linking
 라이브러리가 프로그램의 실행 파일 코드에 포함됨
 실행 파일의 크키가 커짐.
 동일 라이브러리를 가각ㄱ의 프로세스가 메모리에 올리므로 메모리 낭비(예: printf 같은 함수가 각 프로세스마다 전부 메모리 차지)
dynamic linking
 라이브러리가 실행시 연결됨.
 라이브러리 호출 부분에 라이브러리 위치를 찾을수 있는 작은 코드인 stub만 둠. 이 위치는 디스크의 위치?
 라이브러리가 이미 메모리에 있으면 그 루틴의 주소로 가고 없으면 디스크에서 읽어옴.
 운영체제의 도움이 필요.
 다이나믹 링킹을 해주는 라이브러리를 shared library라고 부름. 유닉스는 쉐어드 오브젝트.


Allocation of Physical Memory(물리적 메모리 할당)
메모리의 낮은 부분에는 os 상주 영역으로 interrup vector과 함께 존재.
사용자 영역 프로세스는 높은 주소 영역 사용

사용자 영역 할당 ㅂ아법
contigouous allocation : 연속 할당. 각각의 프로세스가 메모리의 연속적인 공간에 적재되도록 하는 것.
noncontiguous allocation :  하나의 프로세스가 메모리 여러 영역에 분산되어 올라가는 것.
낭비되는 메모리 조각은 내부조각, 외부 조각으로 나뉘어짐.
메모리 공간이 애초에 너무 작아서 쓸수 없는것이 외부조각, 사용은 됬으나 프로그램이 작아서 쓰이지 않는 공간이 내부 조각.
연속할당 :
  고정 분할 방식 : 사용자 프로그램이 들어갈 메모리 공간을 영구적으로 미리 나눠놓는 것. 내부조각 낭비가 생김.  융통성이 없음.
  가변 분할 방식 : 프로개름이 실행될때 차곡차곡 메모리에 적재하는 것. 가변분할을  사용하더라도 프로그램 크기가 다 달라서 외부 조각은 발생할수 밖에 없음.
hole : 가용 메모리 공간. 다양한 크기의 hole들이 메모리 여러곳에 흩어져 있음. 프로세스가 도착하면 수용 가능한 hol을 할당.
운영체제는 할당 공간과 가용 공간의 정보를 유지

Dynamic Storage Allcation Problem : 가변분할 방식에서 size n인 요청을 만족하는 가장 적절한 hole을 찾는 문제
first fit : 사이즈가 n  이상인 것중 최초로 찾아지는 hole에 할당
best fit : 모든 hole을 조사한 다음 사이즈가 n이상인 가장 작은 hole을 찾아서 할당.
worst fit : 가장 큰 hole에 할당. 모든 hole을 조사해야 함.

compaction : 외부조각의 문제를 해결하는 한가지 방법. 외부조각을 한군데로 모아 거대한 하나의 block을 만드는 방법. 비용이 많이 듬. 런타임 바인딩이 지원되어야만 가능.

불연속할당
페이징 기법 : 프로세스를 구성하는 주소공간을 같은 크기의 페이지로 분리해 같은 방시긍로 분리된 물리적 메모리에 올리는 방식. 연속적이지 않지만 연속 할당의 hole 문제가 생기지 않는 대신 주소 변환(address binding)이 복잡해짐.
세그멘테이션 : 프로그램의 주소 공간을 같은 크기가 아닌, 의미 있는 공간으로 자르는 것을 의미. 예를 들어 코드, 스택, 데이터로 잘라서 각가의 세그먼트로 잘라서 물리적 위치에 올리거나 함수단위로 잘라서 올리는 식의 분리 기법을 의미. segmentation기법을 사용하면 hole 문제가 발생할수 있음. 
Paging : 프로세서는 가상 메모리(논리적 메모리)를 동이랗ㄴ 사이지의 page 단위로 나눔. 일부는 backing storage에, 일부는 physical memory에 저장. 불연속적으로 저장됨.
basic method
물리적 메모리를 동이랗ㄴ 크기의 frame으로 나눔. 논리적 메모리를 동일 크기의 page로 나눔(frame과 같은 크기). 모든 가용 frame들을 관리. 주소 변환이 페이지 단위로 이뤄져야 하기에 mmu의 레지스터 두개로는 변환이 안되고 page table을 사용하여 변환해야 함.
외부 조각은 발생 안하지만 내부 조각은 발생할수 있음.
