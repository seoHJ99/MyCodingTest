데드락(교착상태)
일련의 프로세스들이 서로가 가진 자원을 기다리며 블록된 상태
자원 : 하드웨어, 소프트웨어 등을 포함하는 개념(메모리, cpu사이클, i/o 기기, 세마포어등)
프로세스가 자원을 사용하는 절차 : request, allocate, use, release

데드락 발생의 4조건
mutual exclusion(상호 배제) : 매순간 하나의 프로세스만이 자원을 사용할수 있음
-공유해서 안되는 자원의 경우 반드시 성립ㅎ새야 함.
no preemption(비선점) : 자원을 강제로 빼앗기지 않음.
-process가 어떤 자원을 기다려야하는 경우 이미 보유한 자원이 선점됨.
- 모든 필요한 자원을 얻을수 있을때 그 프로세스는 다시 시작된다. 강제로 뺏는다는 소리.
- state를 쉽게 save하고 restore할수 있는 자원에서 주로 사용(cpu, memory)
hold and wait(보유 대기) : 자원을 내어놓지 않고 필요한 자원을 기다림.
-프로세스가 자원을 용청할때 다른 어떤 자원도 가지고 있지 않아야 한다.
  - 방법1 :  프로세스 시작시 모든 필요한 자원을 할당받게 하는 방법. wait가 안생겨서 데드락이 안생기는 대신 비효율
  - 방법2 : 자원이 필요할 경우 보유 자원을 전부 놓고 다시 요청.
circular wait(순환 대기) : 자원을 기다리는 프로세스간에 사이클이 형성되어야 함
- 모든 자원 유형에 할당 순서를 정하여 정해진 순서대로만 자원 할당. 1번 자원이 획득 되어야만 3번을 획득 가능하는 식으로 설계.

자원 할당 그래프 : 데드락이 걸렸는지 확인 가능
사이클이 있으면서 자원이 하나면 데드락. 자원 개수(인스턴스)가 여러개이면 가능성이 있어서 따져봐야 함.

데드락 처리방법
예방 : 자원 할당시 미리 4가지 조건을 만족되지 않도록 하는 것
피하기 : 자원 요청에 대한 부가적인 정보를 이용해서 데드락의 가능성이 없ㅇ는 경우에만 자원을 할당. 시스템 state가 원래 state로 돌아올 수 있는 경우에만 자원 할당
- 자원 요청에 대한 부가정보를 이요해서 자원 할당이 데드락으로부터 안전하진 동적으로 저사해서 안전한 경우에만 할당.
- 뱅커스 알고리즘을 이용해서 안전한지 계산함. (표가 존재함.) 현 가용자원이 어떤 프로세스의 최대 요청치를 충족 가능할때만 자원을 할당하는 방식. 항상 안전함.
-------------------------------------
회복 : 발생은 허용하되 그에 대한 detection루틴을 두어 데드락 발견시 회복
- 자원당 인스턴스가 하나밖에 없는 경우 사이클이 존재하면 데드락.
- wait-for 그래프로도 파악 가능.
- 리커리버
   방법 1 : 데드락과 연류된 모든 프로세스들을 종료.
   방법 2 : 데드락과 연류된 프로세스들을 데드락이 없어질때까지 차례로 죽임.
             비용만 최소화하는 프로세스를 고르면 해당 프로세스는 starvation을 겪게됨.
무시 : 데드락이 생기건 말건 무시. 대부분의 os에서 채택
-데드락은 매우 드물게 발생하기에 조치 자체가 더 큰 overhead일수 있음. 사용자가 직접 처리해야함.