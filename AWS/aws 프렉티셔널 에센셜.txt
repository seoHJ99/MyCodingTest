클라우드 : 인터넷으로 인프라를 제공/사용하는 기술
iaas : infrastructure as a service : 인프라를 제공하는 클라우드 서비스
saas : 소프트웨어를 제공하는 서비스
pass: 플렛폼 제공하는 클라우드 서비스. 제공업체 자체의 인프라에서 소프트웨어와 하드웨어를 호스팅하고 사용자에게 솔루션 서비스를 제공함. 사용자는 이 플렛폼을 이용하여 개발 가능
cass : 서비스로서의 컴퓨팅 : 


온프레미스 : 기업이 자체적으로 인프라를 소유하여 관리하는 경우
aws 장점 : 공통적인 부분은 aws 에서 관리. 기업은 차별적인 부분만 설계. 가변적인 비용. 
프로비저닝 : 사용자가 요청한 it 리소스를 사용 가능한 상태로 준비하는 것

--------------------------------

ec2: elastic compute cloud : 서버 클라우드 서비스. aws 의 서버 역할을 하는 컴퓨터 대여 서비스라고 보면 됨
- 멀티 테넌시: 가상 컴퓨터간 기본 하드웨어 공유 기술
- 하이퍼 바이저 : 쉽게 설명하자면 최상위 관리자. aws 가 담당하며 가상머신(ec2인스턴스) 들을 분리하며 리소스를 맞게 할당함. 
- 수직확장 : cpu나 메모리같은 자원을 필요에 따라 늘리는 것
- 네트워킹 측면 제어 : 네트워크 연결 허가 등을 결정
- 인스턴스 유형은 인스턴스 패밀리로 그룹화됨
  범용: 균형잡힌 컴퓨터. 웹서비스 등에 사용 가능
  컴퓨팅 최적화 : 게이밍 서비스, 과학 모델링 등 컴퓨터 성능이 좋아야 하는 작업
  메모리 최적화 : 메모리 집약적 작업
  액셀러레이팅 컴퓨팅 : 부동 소숫점 계산, 그래픽 처리 등에 사용. 하드웨어 액셀러레이터 활용
  스토리지 최적화 : 로컬에 저장된 데이터를 위해 고성능 필요한 작업

 EC2 Auto Scaling : 수요에 따라 자동적으로 인스턴스가 추가되거나 제거되어 동적으로 사용량에 대응하는 서비스
- 최대, 최소, 희망 용량을 설정 가능. 사용한 만큼만 지불
수직확장 : 실행중인 장치에 실행 능력을 추가하는 것. 
수평확장 : 인스턴스의 숫자를 늘려 처리 요청을 늘리는 것

ELB: elastic load balancing : 다수의 인스턴스를 사용할때, 요청을 고르게 분산(라우팅)시키는 목적으로 사용. 
 - 고성능
- 비용 효율성
- 고가용성
- 자동 확장 가능
리전 수준 구조 . 자동으로 고가용 서비스.
인스턴스 확장시 준비 상태가 되면 이를 알리고 꺼짐.
축소시 모든 신규 트래픽 중지, 기존 요청이 완료되면 인스턴스 종료하면서 축소. 중단 x
트래픽을 계산해서 새로운 트래피은 가장 적은 트래픽으로 분산.
따라서 백엔드와 프론트를 분리 가능

메시징 및 대기열
밀결합된 아키텍처(모놀로식 서비스) : 2개 이상의 어플리케이션이 다른 어플과 직접적으로 메시지를 통해 통신하는 구조 
- 하나가 고장나면 아예 아키텍처 자체가 망가짐.
소결합된 아키텍처(마이크로 서비스 ): 단일 장애로 인한 연속 장애가 발생하지 않는 구조
- 메시지를 직접적으로 통신하지 않고 중간에 메시지를 전달하기 위한 전달자가 존재.
- 결합된 어플이 고장나더라도 메시지를 저장함.
- sqs: 메시지를 저장, 전송, 수신함. 모든 볼륨에서 소프트웨어 구성 요소간에 작동
- sns: 게시/구독의 방식으로 메시지를 전송. sns주제 : 메시지를 전달할 채널. 주제에 대한 구독자들에게 메시지를 전달. 람다, https 등이 구독자가 될수 있음. 모바일 푸시, 이메일 등 서비스가 가능해짐.

추가 컴푸팅 시스템
서버리스 :  서비스가 호스팅되는 기본 인프라를 보거나 액세스할수 없는(하지 않는) 서비스. 알아서 관리됨.
lamdba: 사용자가 코드를 업로드함. 트리거를 만들면 트리거가 작동할때 코드 작동. 코드는 관리형 환경에서 자동으로 실행. aws가 관리. 코드가 15분 미만으로 실행함. 장기 프로세스는 x.
컨테이너(도커 컨테이너) 오케스트레이션 도구
컨테이너 : 코드 패키지
클러스터 : 여러 인스턴스 그룹에서도 실행되는 컨테이너도 조작, 감시하는 프로세스. 이를 컨테이너 오케스트레이션이라고 함. 
elastic container service (ECS): 컨테이너 오케스트레이션 서비스. 컨테이너된 어플리케이션을 대규모로 실행/로그를 찍는데 도움을 줌
elastic kubernetes service (EKS) : 다른 도구와 다른 기능을 제공.
- fargate : 사용자 대신 컨테이너를 관리해줌. os 엑세스를 안해도 될때 사용
정리
ec2: 기존 방식. os 전체에 대한 엑세스 필요
lambda: 단기 실행 코드. 서비스 중심 어플. 이벤트 기반 어플. 서버를 따로 관리하지 않음
ecs / eks: 도커 컨테이너 기반 워크로드 실행.  

--------------------------------------------------------------------

리전 : aws 데이터 센터 지역. 전 세계에 나눠져 있음.
- 리전은 서로 격리되어 있음. 정부 규제 등을 알아서 지켜줌
- 사용자 요청 전에는 리전 밖으로 데이터가 나갈수 없음
- 리전 선택 요서 4가지
  1. 규정준수
  2. 근접성 - 고객과 얼마나 가까운가
  3. 기능 가용성 - 어떤 리전에서는 필요한 서비스가 작동하지 않을수도 있음.
  4. 요금 - 일부 지역이 더 쌈.

가용영역
리전은 다양한 데이터센터의 모음
데이터 센터를 가용영역, AZ 라고 부름.
각 가용영역(az) 에는 네트워크 전력등을 구비한 독립적인 데이터 센터가 존재.
가용영역은 서로 분리되어 있어, 현재 가용영역이 사용 불가능이 되어도 다른 가용영역에서 동작 가능.
따라서 서로 다른 두 az에 인프라를 중복해서 배포하는게 이상적.
리전 수준의 서비스는 모두 이런 식으로 동작하기에 걱정하지 않아도 됨

엣지로케이션
다른 리전에서 온 요청을 처리해야 하는 경우. 해당 리전에 복사본을 캐싱하거나 배치하면 됨.
콘텐츠 전송 네트워크(CDN) : 지리적 위치를 기반으로 사용자에게 엣지 콘테츠를 제공하는 네트워크
cloudFront : 데이터, 동영상 api 를 전세계 고객에게 짧은 지연시간으로 전달하는 서비스.
- 전 세계에 있는 엣지 로케이션을 이용해 사용자 위치가 어디던 빠르게 통신.
- 리전과 구분됨. 리전에 있는 데이터를 전세계 엣지 로케이션에 보낼수 있음. 
Route 53 : DNS임. 짧은 지연시간으로 고객을 옳바른 위치오 연결
Outposts :  사용자의 데이터 센터 내부에 소형 리전을 만드는 서비스. 
- aws의 모든 서비스를 이용 가능하지만 사용자의 건물에 격리됨.
- aws 인프라 및 서비스를 온프레미스 데이터 센터로 확장


aws 리소스를 프로비저닝
api 를 통해 aws 서비스를 사용 가능.
management console(웹 브라우저), 명령줄 인터페이스(cli), 소프트웨어 개발 키드(sdk) 로 api 전송 요청을 만들수 있음.
1. management console
- 관리가 쉬움
- 비용을 관리할수 잇음
- 실수할수도 있음
2. 명령줄 인터페이스
-머신의 터미널을 이용
- 예약하거나 트리거 방식으로 실행 가능
3 . sdk
프로그래밍 언어를 통해 aws 리소스와 상호 작용.

aws 관리 도구를 통한 프로비저닝
Elastic Beanstalk : ec2 기반 환경을 프로비저닝할수 있음.
- 어플 코드와 구성을 제공하면 알아서 구성됨.
- 개별적으로 관리하지 않아도 되며 가시성이 좋음
CloudFormation : aws 리소스를 정의하는데 사용되는 코드형 인프라 도구.
- json, yaml 텍스트 기반 문서를 사용하여 aws 리소스를 정의함
- ec2, 스토리지, 데이터베이스 머신러닝 등의 리소스를 제공
- 다른 aws 서비스에 대한 모든 호출과 api 를 대신 관리해줌
- 여러 환경에서 똑같이 실행하는 것을 도와줌
- 바로 자동화를 실행하긴 별로고 cli 나 sdk 같은 걸로 관리하는게 좋음

--------------------------------
네트워크

Virtual private cloud (vpc) : 논리적으로 격리된 aws 클라우드 섹션을 만들수 있음. 
- 리소스 그룹을 서브넷이라고하며, vpc 에 있는 ip 주소의 범위임
- 퍼블릭 서브넷 : 외부와 소통이 가능한 ip 그룹
- 프라이빗 서브넷 : 그 반대

vpc : 사용자의 고유한 네트워크 
aws 리소스용 프라이빗 ip 의 범위를 정할수 있음.
서브넷 : vpc 내의 ip 주소 모음으로 리소스를 그룹화할수 있게 해줌.
- 리소스를 개방할지 말지 설정 가능
- 퍼블릭 : 인터넷 게이트웨이(IGW) 를 vpc 에 연결해야 함. 
- 프라이빗 : 가상 프라이빗 게이트웨이에 연결하여 인증된 사용자만 접근 할수 있도록 설정. 온프라미스 리소스간의 연결을 생성 가능
                - 다른 사람과 공유하지 않는 연결망이 필요함
                - Direct Connect 를 사용하면 데이터 센터에서 aws로 이어지는 완전 비공개인 점용 광섬유 연결을 구축 가능. 물리적인 연결.
                     즉, vpc 와 네트워크를 연결하는 물리적 회선임

서브넷 및 네트워크 액세스 제어목록
vpc 에서의 네트워크 강화
네트워크 acl : 리스트에 허용 상태인 네트워크만 서브넷에서 이동하는 것을 허용. 나가는 트래픽 역시 검사함.
- 서브넷 경계를 지나는 모든 패킷을 검사
- 그러나 서브넷 내부에서의 패킷 이동은 검사 x
- 비상태성 stateless. 상대방을 기억하지 않음
- 기본적으로 모든 인바운드와 아웃바운드를 허용
보안그룹: 인스턴스 레벨의 보안 기능
모든 인스턴스는 생성과 동시에 기본 보안그룹 생성.
- 들어오는 요청만 검사. 나가는것은 x
- 상대를 기억함. 한번 인증된 사용자는 다시 검사 않함
- 기본적으로 모든 인바운드는 거부, 아웃바운드는 허용

글로벌 네트워킹
Rout53 : aws 의 dns
cloudFront : 엣지 로케이션을 이용해 요청자와 가까운 위치에 데이터를 저장하고 있음
- 사진 등의 데이터를 요청자의 리전에도 저장하고 있어서 빠름

-------------------------------------------------------------

스토리지 및 데이터베이스 
블록 수준 스토리지: 디스크에 파일을 저장하는 것과 동일한 스토리지. 즉, hdd.
인스턴스 스토어 볼룸: 호스트와 연결되어 ec2 인스턴스가 정지거나 삭제되면 없어지는 저장소. ec2가 돌아가는 호스트는 매번 다를수 있기에 삭제됨.
Elastic Block Store (EBS) : 가상 하드 드라이브. ec2 인스턴스와 연결됨. 호스트와 연결되지 않기에 인스턴스를 멈춰도 유지됨. 
   - 스냅샷이라고 하는 증분 백업을 만들수 있음
   - 기본적으로 ssd

S3 : 무한대의 데이터 저장 및 검색 저장소.
 - 데이터는 버킷에 저장
 - 객체로 저장됨
 - 객체는 최대 5tb
 - 객체 버전 관리
 - 여러 버킷 저장
 - 객체 접근 권한을 설정 가능
 - 계층을 나눠 데이터를 배치 가능
  1. Standard 계층 : 99.9999% 내구성. 오래 유지됨.
  - 자주 엑세스되는 데이터
  - 최소 3곳 시설에 저장됨
  - static 웹사이트를 배포하는데 효과적

 2. Standard-Infrequent Access (S3 standard - IA) 
    - 엑세스 빈도는 낮지만 빨라야할때
    - 백업 파일 등 오래 저장하는 데이터
   - 저장가격 낮고 검색가격 높음

 3. S3 Glacier
  - 오래 저장되지만 자주 검색되지 않음
  - 잠금정책을 만들어 잠금이 가능
  - 한번에 쓰기/ 여러번 읽기가 가능(WORM)  

기타 등등 : S3 One Zone-Infrequent Access(S3 One Zone-IA) - 가용영역 1곳 | S3 Intelligent-Tiering - 엑세스 패턴 무작위 | S3 Glacier Deep Archive - 장기보관 + 가장 저럼

수명 관리 주기를 만들면 데이터가 자동으로 이동. 사용자가 직접 관리하지 않아도 됨

Amazon EBS와 Amazon S3 비교
1. 사진분석 - s3 : 웹 지원, 리전변 분산, ebs에 비해 쌈. ec2 필요없는 s3 ---- 자료가 자주 변경되지 않을때
2. 오류를 수정해야 하는 동영상 -ebs : s3 와 달리 블록은 객체가 변경되더라도, 변경된 비트가 존재하는 블록만 업데이트, 오버헤드가 적음 -- 자료가 자주 변경될때

ElasticFileSystem(EFS)
EFS: 관리형 파일 시스템. 여러 인스턴스가 동시에 엑세스 가능. 사용자의 다른 작업이 없이도 축소/확장 가능.
 - EBS 는 ec2에 연결되기에 같은 가용 영역에 인스턴스가 있어야 함. 자동확장 x
  - 여러 인스턴스에도 동시에 일고 쓰기 가능
 - Linux 파일 시스템
 - 리전 리소스(여러 가용 영역) - 같은 리전의 모든 ec2에서 접근 가능
 - 자동 확장

RDS
리프트 앤 시프트 마이그레이션 : 온프레미스 rdbms 의 데이터를 클라우드로 가져옴
- 자동 패치, 이중화, 보안, 장애조치, 복구, 백업 등을 자동으로 진행
Aurora 
aws 의 관계형 데이터베이스.
mysql 과 postgresql 과 호환.
상용 데이터베이스 비용의 1/10.
6개의 데이터베이스 복제본을 3개의 가용영역에 복사함. 
최대 15개의 읽기 복제본.
s3로 지속적인 백업
특정 시점으로 복구

DynamoDB
서버리스 데이터베이스. 비관계형 데이터베이스
데이터는 항목과 속성으로 구분.
오토 스케일링.
가용영역 전체에 중복으로 저장
고가용성 데이터베이스
확장성이 높고 성능도 좋다.
sql 을 사용하지 않는다.
키(항목)-값(속성) 페어.
아주 빠르게 엑세스되고 타입이 고정적이지 않은 데이터 저장.
단순하고 유연.
키로 지정되는 작은 속성 하위 집합을 기반으로 쿼리 작성.
응답시간이 빠름.
특수 목적.

rds와 DynamoDB 비교
1. RDS - 복잡한 관계형 조인 사용.
2. DynamoDB - 그외 대부분. 단순히 보기위한, 조인이 없는 단일 테이블 영역.

Amazon Redshift
기존 RDBMS 는 데이터가 복잡해지거나 너무 많아지면 처리하기 힘들어짐.
데이터 웨어하우스 : 빅데이터용으로 제작
- 기록분석(현재와 관련되면 안됨)
- 지속적으로 
Redshif
- 웨어하우스 관리를 편하게
- spectrum 을 이용해서 엄청난 빅데이터에 단일 sql 을 쉽게 적용

AWS Database Migration Service (DMS)
이미 온프레미스에 있는 데이터를 가져오는 기능
마이그레이션동안 원본db도 정상적으로 작동해서 가동 중지 시간 최소화 
원본 db 와 대상 db의 유형이 달라도 됨
-이종 마이그레이션
2단계로 진행
1. aws schema conversion tool 을 사용해 스키마 구조와 데이터베이스 코드를 일치하도록 변환
2. dms 를 이용하여 마이그레이션
-개발 및 테스트 데이터 마이그레이션
프로덕션 사용자에게 영향을 주지 않고 개발자가 프로덕션 데이터에 에플리케이션을 테스트할수 있도록 지원
-여러 데이터베이스 통합
-연속 데이터 복제(데이터베이스 복제)

추가 데이터베이스 서비스
DocumentDB : 콘텐츠 관리, 프로필 등 관리
Neptune : 그래프 데이터베이스. 소셜 네트워킹 및 추천엔진 고려
Managed Blockchain: 100프로 무결성. 삭제되지 않음. 여러곳에서 저장
Quantum Ledger DB(QLDB) : 100프로 무결성. 한곳에서 저장. 변경 불가능한 기록
ELastiCache : 데이터베이서 엑셀러레이터(캐싱)
DAX : 다이나모db를 빠르게

--------------------------------------------
보안

공동책임모델 : aws와 고객이 같이 보안 책임을 공유함
객체별로 나눠서 서로 보안을 분담
운영체제, 어플, 데이터 등은 고객책임

aws 책임
 1. 물리적 공간
 2. 네트워크
 3. 하이퍼바이저

고객 책임
 1. 운영체제
 2. 어플리케이션
 3. 데이터

 
사용자 권한 및 액세스 IAM
Identity and Access Management(IAM)
aws 계정 루트 사용자가 모든 것을 설정. 모든 리소스에 엑세스 권한을 설정. 제한이 없음.
MFA(Multi-factor authentication) : 비밀번호를 제외한 다른 인증수단 추가
IAM 
- iam 사용자를 만들어 그에 맞는 권한 부여 가능
- 초기에는 모든것이 거부됨
- 최소권한원칙
- iam 정책: 사용자에게 어떤 권한을 주고 거부할지 정하는 json 문서
   - action 을 통해 api 호출 가능
   - resource 를 통해 어느 리소스에서 api를 호출할지 정할수 있음
루트 사용자
사용자
그룹
정책
역할
로 구성됨
역할 : 특정 작업을 허락하거나 거부하는 것을 일시적으로 할당가능.
        암호와 사용자 이름이 없고 임시 권한.
        사용자, 외부 자격 증명, 어플, aws 서비스에 역할을 부여해줄수 있음
        역할이 부여되면 이전의 모든 권한을 폐기함. 

처음에는 iam 사용자를 만들어 다른 사용자를 만들수 있는 권한 부여.
그리고 그 다른 사용에게 제한된 작업에 대해서만 루트 사용자 엑세스

AWS Organizations
업무를 분리하여 권한을 분리되면 고도화 될수록 권한과 계정이 복잡해짐
aws 계정을 관리하는 중앙 위치.
- 모든 계젱에 대한 중앙 집중 관리
- 통합 결제. 모든 맴버의 비용 결제
- 계층적 그룹화 . 즉, 권한이나 설정에 맞게 계층 분리가 가능
- (scp) 서비스 제어 정책: aws 서비스 및 api 작업 엑세스 제어에 대한 정책.

규정 준수
호스팅하는 서비스에 따라 규정을 지키는 것이 보장되어야 함.
aws 에서는 이미 다양한 규정에 알맞는 설정이 되어있음.
리전에 따라서 알아서 되는 경우도 있음.
Artifact : 규정 준수 보고서 확인 가능
규정준수 : 모든 규정 준수를 한고에서 확인


서비스 거부 공격(디도스)
개념 : 작동하지 못할때까지 요청을 ㅁ낳이 넣어 과부화 일으키는 것
UDP FLOOD : 공신력있고 많은 데이터를 리턴하는 사이트에 요청에 대한 리턴 주소를 다른 서비스로 지정
HTTP 수준 공격 : 정상적인것 같은 요청을 계속 함.
slowloris 공격 : 아주 느린 요청을 날려서 나머지 요청을 느리게
해결법 
AWS Shield Standard 공짜.
aws Shield Advanced 유료
1. udp는 보안그룹 설정. 네트워크 레벨에서 막을수 있음.
2. slowloris : 로드밸런싱(elb)로 해결 가능. elb 역시 리전레벨이기에 리전 수준의 공격이 아니면 무의미함
3. waf사용 aws shield : 웹 어플 방화벽을 이용해 악의적인 접근만 따로 골라냄

추가 보안 서비스
키가 있어야 권한이 있도록 설정.
저장 중 암호화 : 저장될때 암호화되어 저장되고, 옳바른 키로 디코딩하는 방식
전송 중 암호화 : 마찬가지로 전송할때 암호화되어 전송하는 방식.
Amazon Inspector : 인프라에 대해 자동화된 보안 평가.
- 네트워크 구성 연결성 부분
- amazon 에이전트 
- 보안 평가 서비스
로 이뤄짐.
권장사항과 취약점을 확인 가능
Amazon Guardduty : 로그와 네트워크 등을 학습하여 위협을 탐지. 독립적으로 활동. 성능에 영향 x
AWS WAF : 웹 어플로 들어오는 네트워크 모니터링
AWS Key Management Service(AWS KMS) : 암호화 키를 이용하여 데이터 암호화

-----------------------------------------------------------------------------------
모니터링



Amazon CloudWatch
- 운영이 성공적인지 모니터링
- 지표(임계점)를 지정하여 경보를 보낼수도 있음. sms 와 연동
- 대시보드에 거의 실시간으로 온갖 지표를 볼수 있음
이점 
1. 중앙에서 모든 지표에 액세스
2. 애플리케이션, 인프라, 및 서비스에 대한 기성 확보
3. 평균 문제 해결 시간 단축(mttr) 및 총소유 비용 감소(tco)
4. 에플리케이션 및 운영 리소스 최적화를 위한 인사이트 확보

AWS CloudTrail
포괄적인 api 검사 도구.
모든 api 요청이 기록됨. 누가 뭘하고 어떤 작업이 이뤄지고 뭘 리턴했는지
로그를 s3버킷에 무제한으로 저장. 변조방지 

AWS Trusted Advisor
신뢰할수 있는 자동화된 자문.
5대 기준
1. 비용
2. 성능
3. 보안
4. 내결함성
5. 서비스 한도 
aws 모번 사럐를 기반으로 검사. 
ex) 루트 사용자에 대하여 mfa 가 설정이 안됨, 백업이 없음 등. az 가 제대로 설정 안됨 등
서비스가 한도에 달했을때도 알려줌


-----------------------------------------------------------
요금

프리티어
1. 상시 무료
2. 1년 무료
3. 평가판

ex) 람다는 100만건 무료
라이트세일. 평가판

예약하면 비용 절감.
많이 사용할수록 할인.
요금계산기
s3의 경우, 스토리지, 검색, 요청, 전송, 관리 복제 비용이 청구됨

결제 대시보드
한눈에 많이 사용한 서비스와 예상 금액, 월간 사용량 등이 나옴.

통합결제
Aws organization을 이용해 계정이 많아도 루트 계정에 통합결제 됨
어느계정에서 뭘 했는지 확인 가능

예산
비용 또는 사용량을 초과하거나 초과할것 같으면 알람이 옴.

AWS Cost Explorer
aws 지출되는 비용을 즉각적으로 확인하고 12개월간의 지불 비용을 제공한다.
서비스별로 그룹화, 리전 선택 가능.
태그로 지정 가능.

AWS Support 플랜
basic support 가 모두에게 제공됨.
24시간 연중무휴 고객서비스, 문서 trusted advisor 등이 제공됨.
developer support.
basic 다음 단계.
이메일로 고객지원 요청시 12시간내에 대답
business
trusted advisor을 제공.
클라우드 지원 엔지니어와 직접 통화
인프라 이벤트 관리

enterprise
15분 sla
기술지원관리자(tam)지원. 최적화well-architecture 등을 제공
well-architected 의 핵심5요소: 운영우수성. 보안. 안정성. 성능 효율성. 비용최적화

AWS Marketplace
aws 에아키텍쳐에서 실행되는 타사 소프트웨어를 관리하는 단계를 간소화하는 디지털화된 카탈로그.
광범위한 서비스를 안전하게 제공하고 비용 절감.
타사 어플을 따로 배포, 설치, 관리할 필요 없이 원클릭 배포.
온디멘드 및 종량제 옵션 제공. 따라서 미사용 라이센스 사용 비용을 지불할 피요가 ㅇ벗음.
엔터프라이즈 중심기능
-사용자 지정 약관 및 가격
-private marketplace
- 조달시스템 통합
- 비용 관리 도구