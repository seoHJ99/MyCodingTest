IAM 역할 
임시 자격 증명 : 만료시간 존재. 재사용 불가. 
영구 자격 증명 : 만료시간 X, STS 사용.
Federtion : 토큰에 권한을 부여하는 방식
리소스에 부여 가능
조건 부여 가능(condition)
자격 증명(Identity) 기반 정책 : 사람에게. 정책의 리소스를 표기할때는 arn 사용. effect, action, resource
리소스 기반 정책 : 리소스에 권한 부여. 일부 서비스의 리소스만 가능. effect, action, resource, principal
deny 와 allow 가 겹치면 deny 먼저

보안 인증 정보
만약 credentials 와 config 폴더 둘 다에 인증정보를 저장하면 credentials 가 우선순위가 더 높음

인스턴스 프로파일
에플리케이션에 직접 권한을 줄 수 없기에 에플리케이션을 소유하고 있는 ec2에 권한을 주는 것.
우선 순위는 가장 낮지만 가장 권장사항임.

Cloud9
임시 자격 증명이 활성화 되있음(기본값). 이를 통해 자격증명


복습 끝
--------------------------------------------------------------------

AWS 스토리지(초록색)
저장 파일 타입 : 블록/ 파일/ 객체
블록 스토리지 : EBS - 블록 단위로 저장. 수정이 쉬움. 속도가 빠름. ec2와 연결.
    - AZ 레벨이기에 az간 이동 불가. 
    - 같은 az의 인스턴스간 이동이 가능.
    - 유형에 따라 ec2 하나에 여러 ebs 가능.
    - 최대 16tb. 프로비저닝된 용량만큼 비용.
    - 기본적으로 오토스케일링이 안됨. rds 같은 곳에서 사용되는 ebs 에 한에서 예외적으로 오토스케일링 허락
파일 스토리지 : EFS, FSx(4개) - 파일 시스템 사용. 트리 구조. 기본적으로 NFS 는 리눅스. ec2와 연결. vpc 내부.
    - 여러 인스턴스에서 파일을 공유하고자 할때 사용
    - 리전 레벨. 최소 3개 AZ에 중복 저장. 
    - 온프레미스와 파일 공유 가능
    - 마운트해서 사용
    - 최대 16tb. 프로비저닝된 용량만큼 비용
객체 스토리지 : S3 - 객체 단위로 저장. 데이터와 메타 데이터를 한데 묶어 오브젝트 단위로 관리. 데이터를 수정하려면 객체 전체가 수정되야 함
    - 덮어쓰기이기 때문에 이전 객체가 가진 권한 역시 모두 사라짐. 버전 관리의 필요성
    - 자동으로 url 생성
    - 리전 레벨. 최소 3개의 가용영역에 중복 저장
    - api 해서 사용
    - 저렴하고 무제한. 대신 성능이 떨어짐

S3
무제한. 비용. 서버리스. 고가용성. 내구성. 보안. 자동확장 등
덮어쓰기. 자주 안바뀌는 데이터 추천
비정형 데이터
객체 하나의 최대 용량은 5tb
버킷 단위.
리전 레벨.
flat 구조.
    flat 구조 : 데이터 조회 속도는 빠르나 검색이 어려움. 접두사가 존재하지만 하위의 개념(폴더 개념) 이 아님. 
    tree 구조 : 데이터 검색은 쉬우나 조회 속도가 다소 느림.
시각적으로는 트리구조이지만 이는 가시성을 위한 것.

객체의 요소
키 : 고유한 식별자(모든 접두사 + 이름)
데이터 : 파일, 이미지 등
메타데이타 : 시스템 떠는 사용자의 정의

버킷이름 만들때 대문자 안됨. 특수문자 안됨(도메인이 때문에). 언더바 안됨.
접두사는 필터링에 사용 가능.

이벤트
s3 의 상태 변화(객체 추가, 삭제, 복원, 복제)
이벤트가 일어나면 sns, sqs, lambda, 이벤트 버스에 넘겨줄수 있음.

버전관리
기본적으로 비활성화
각 객체에 버전 id 가 존재
객체 잠금이 지원됨.
아래 버전은 키 + id 로 검색
삭제시 가장 최신 버전이 삭제되면서 삭제 마커가 붙음. 그러나 버전 id를 입력하면 삭제된 버전이여도 검색 가능
영구 삭제는 삭제 id로 해야함.

객체 태그
관리의 편의성을 위한 범주화를 위해 사용.
리소스당 50개 만들수 있음.

엑세스 제어
IAM 과 acl 이 있으나 IAM 권장.

엑세스 포인트
정책 json 의 용량 제한으로 인해 나온 기술
여러 사용자가 각기 다른 권한으로 s3 에 접근하고자 할때, 리소스 기반 정책으로 만들고자 하면 너무 길어짐.
이를 해결하기 위해 권한이 다른 액세스 포인트를 생성. 필요 권한마다 따로 액세스 포인트를 생성.
그리고 각각의 액세스 포인트에 대해서 권한을 설정.
http 만 지원. https 안됨
이중스택(ipv4 와 ipv6 둘다 지원)
ex : dev 액세스 포인트로 접근시 read만
     admin 액세스 포인트로 접근시 모든 권한
     writer 액세스 포인트로 접근시 write, read 만

s3의 비용
1. 저장비용
2. 액세스 비용
3. 전송 비용 - cloudFront(엣지 로케이션)을 사용하면 비용 x.

수명주기
시간이 지날수록 저장비용 절감. 액세스 비용은 증가.
이를 단계적으로 나눠둠.
standard -> standard-ia -> glacier(일반적으로 실시간 검색 안됨)
접두사 또는 태그별로도 수명 주기 관리 가능.


aws cli s3 명령어
하위 수준 명령이 존재함(ex : aws s3api copy-object ~~~)
상위와 하위의 차이 : 
    하위는 api 를 그대로 가져옴.
    반대로 상위는 연관된 api 끼리 묶어서 하나로 만듬. 추상화 수준이 더 심하고 쓰기 편함.
    상위는 리소스 단위. 하위는 클라이언트 단위. 
    모든 서비스가 상위 수준이 존재하는건 아님.
하위수준 명령어:
    multipart-upload : 나눠서 업로드.
    cp : 복제.
    sync : 동기화

sdk 를 이용한 amazon s3 에서 작업
1. sdk 에 대한 amazon s3 설정을 구성. (리전, 액세스 키 등)
2. 종속성 정의 (boto3 등 sdk 라이브러리)
3. s3 클라이언트를 생성하여 서비스 요청(코드 내부에서 클라이언트 객체)
4. 작업 수행
5. s3 클라이언트를 닫음

HeadBucket API 작업
글로벌적으로 버킷이 존재하는지, 해당 버킷에 액세스할 권한이 있는지 확인.
버킷을 새로 만들거나 할때 사용.

s3 오브젝트 put 작업의 권장은 multipart upload

객체 관련 작업 : s3 select
간단한 sql 표현식을 사용해 객체에서 데이터 하위 집합만 검색.
필요한 정보만 가져오기에 전송 비용, 시간 감소.
데이터를 가져오기 전에 미리 필터링.

임시 권한 부여 : 미리 서명된 url
미리 특정 권한이 부여된 기간제 url 을 만들어 사용자에게 전달하는 것.
    - 만기일 지정

정적 웹 사이트 호스팅
버킷의 객체는 url 이 만들어지기에 정적 웹 사이트는 브라우저처럼 사용 가능

CORS(교차 오리진 리소스 공유 허용)
api 게이트웨이를 이용하여 접근할때 서로 접근자의 도메인 이름이 다름.
본래 보안상의 이유로 다른 출처의 데이터 접근을 막아놨으나, s3 에서는 이를 허용해줘야 접근이 가능함.
따라서 s3에서는 이를 허용



--------------------

session 매니저 사용하기 위해선 ssm 에 대한 접근을 허용하는 정책과 접근하려는 ec2에 ssm 에이전트가 설치되어 있어야 함.

----------------------
데이터베이스

rds : 관계형 db. 다양한 엔진 지원. 
dynamoDB : no sql. 키-값. 유일하게 인스턴스 기반이 아님.
Neptune : 그래프.
elastiCache : 인 메모리 캐싱

관계형과 비관계형 차이 
비관계
   - 행 단위로 추가하지 않음. 
   - 스키마가 동적. 스키마를 거의 설계하지 않음.
   - sql 사용하지 않음
   - 문서 수집에 집중
   - 트랜잭션 지원 여부가 유동적
   - 데이터 일관성이 다소 밀림. 최종과 강력이 존재하며, 최종일때는 일관성이 유지되지 않을수도 있음.

dynamoDB 기본사항
    - 행 대신 아이템
    - 파티션키는 필수. 정렬 키는 선택사항. 이것들을 이용해서 pk 처럼 사용
    - iam 을 통해 접근 가능한 데이터 조건 부여 가능
    - 저장 공간 파티션을 키값 해시 알고리즘을 이용하여 구분. 따라서 같은 파티션 키값을 가진 데이터들은 분리된 파티션에 저장됨.
    - 정렬 키를 이용하여 정렬된 상태로 저장.
    - 읽기 및 쓰기 처리량을 미리 설정 가능. 설정된 단위 이상으로 데이터를 쓰면 오류. 오토스케일링 가능.
    - 프로비저닝의 경우 초당 읽기 RCU 는 최대 초당 4kb, 쓰기 WCU 는 최대 1kb. 아이템 크기는 최대 400kb.
    - 읽기는 강력한 읽기와 최종 읽기로 나뉨. 3개의 가용영역에 걸쳐 중복저장됨. 덕분에 속도가 빠르고 내구성이 좋음
    - 하지만 데이터 일관성에 있어 약간의 지연시간이 존재하기에 가장 최신본의 데이터를 가져올수 없을수도 있음.
    - 최종 일관성 : 기본값. 데이터를 조회할때 데이터 일관성이 유지되지 않을수도 있음. 프로비저닝된 읽기 용량의 절반만 사용. 4kb 로 2개
    - 강력한 일관성 : 데이터를 조회할때 반드시 일관성 유지. 읽기 용량 단위가 최종 읽기에 비해 2배. 4kb 로 1개.
    - 테이블 생성을 위해 이름, 파티션키(+ 정렬키), 프로비저닝인지 온디멘드인지 선택.
    - 온디멘드가 더 비쌈.
    - 비용 절감을 위한 액세스 빈도에 따른 클래스 타입이 존재.

다량의 데이터를 가져오는 방법
1. query - 조건을 줘서 가져온 값들에 필터링 가능. 조건은 정렬키, 파티션키만, 필터링은 다른 값들도 가능.
2. scan - full 스캔만 가능. 조건과 필터링이 되긴 하지만 그 대상이 무조건 db 전체임
이를 해결하기 위해 Secondary Index 사용 가능.

Secondary Index 보조 인덱스
기본이 아닌 키를 이용해 데이터 쿼리 가능
쿼리와 스캔에 사용 가능.
새로운 테이블을 만드는 방식.
저장공간 차지.
1. 로컬 보조 인덱스 - 파티션키가 동일. 따라서 같은 파티션에 저장됨. 테이블 만들때만 만들수 있음(파티션 때문). 삭제도 불가능
                   - rcu/wcu 가 기본 테이블에서 상속.
                   - 만들수 있는 숫자가 적음. 제한됨
2. 글로벌 보조 인덱스 - 파티션키와 상관 없음. 언제든지 생성, 삭제 가능. 최종일관성만 지원.
                     - rcu/wcu 를 독립적으로 설정 가능. 기본적으로 상속.
                     - 만들수 있는 숫자가 큼. 로컬 대비.



--------------------------------------------
dynamoDB 를 이용한 프로그래밍
java 와 .net 는 객체 지속성 인터페이스를 지원

제어영역 : 테이블을 만들고 제어하는 영역
데이터 영역 : 테이블 내부의 데이터를 제어하는 영역

되도록 데이터가 파티션 키 하나에 몰리지 않도록 설계
쿼리 사용을 위해 보조 인덱스 사용.

결과는 페이지를 매겨서 가져옴. 한페이지당 1mb
하위수준 api에서는 직접 코드 작성. 상위 수준 api 에서는 알아서 페이지 처리됨.

업데이트는 조건부 쓰기가 가능. 조건이 만족했을 시에만 쓰기 작업.

dynamoDB 캐싱
dynamoDB accelerator(DAX) 와 ElastiCache 가 존재
빠르게 읽기 가능

-------------------------------------------

EC2
ec2 인스턴스는 하드웨어 + os 까지만 가상화해서 사용자에게 제공.
하이퍼바이저의 os 위에 vm을 돌려 격리된 환경을 os 까지 설치된 제공하는 것이 인스턴스.
따라서 vm 을 설치해야 하기에 느림. 그리고 무거움.
이를 경량화시킨 것이 컨테이너
즉, 하드웨어까지 제공

컨테이너
에플리케이션과 이를 구동하기 위한 종속성까지 한데 묶어낸 이미지로 만든 것이 컨테이너.
os는 포함하지 않음.
컨테이너가 직접 설치나 vm 보다 훨씬 빠름.
즉, 경량화.
이런 컨테이너 관리를 위한 서비스 ECS, EKS 가 존재.
ec2 위에서 동작. ec2 역시 vm 이기에 vm 위에서 동작하는 것. 따라서 ec2 비용 청구
서버리스 컨테이너 fargate.
오케스트레이션 도구.
즉, os 까지 제공.

람다
런타임까지 제공. 버전 선택 불가.
추상화 수주닝 가장 높음.
요청이 들어온 만큼 비용 청구.
main 함수를 handler 라고 함.
이벤트 또는 직접 호출, 예약 호출이 가능.
