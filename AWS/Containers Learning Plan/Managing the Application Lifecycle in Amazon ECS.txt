AWS CloudFormation
yaml 파일로 리소스 정의
    - 세분화된 제어 권한.
AWS CDK
선언적 모델과 프로그래밍 언어를 이용하여 리소스를 정의할수 있는 소프트웨어 개발 프레임워크
    - 높은 수준의 제어
AWS Copilot
명령줄 인터페이스로 컨테이너 시작, 관리, 패포 파이프라인 자동화.
    - Fargate 는 인터넷 연결 엔드포인트는 설정 안함
    - ALB 는 알아서 생성
    - AWS SNS 사용 가능
    - 낮은 수준의 제어
AWS Proton
컨테이너화된 에플리케이션 완전관리형 전송 서비스.
    - 템플릿, 환경템플릿, 서비스템플릿, 서비스 인스턴스로 구성
    - 비용제어, 규정 준수.

-------------------------------------------
AWS CodePipeline
aws 에서 CI/CD 파이프라인을 구축하는데 사용
각 단계를 정의하고 작업을 오케스트레이션하기 위한 도구.

AWS Copilot
파이프라인 구축 및 배포 가능.

배포패턴
1. 롤링 - 점진적으로 조금씩 새버전으로 교체
    - 배포 중 실행 테스크수 상한, 하한 지정(퍼센트)
    - 배포 회로 차단기
    - 배포 실패한 태스크 숫자가 일정 임계치에 도달하면 배포 자체를 중단함.
    - 실패 임계치는 원하는 테스크 수의 절반.
    - 최소는 10. 최대는 200
2. 블루 / 그린 - 새로운 서버를 만들어 시험하고, 한번에 모두 대체
    - 카나리 배포 : 새로운 버전에 트래픽을 조금만 준뒤, 테스트 통과하면 전부 교체
    - 선형 배포 : 카나리배포처럼 하지만, 시간이 흐르면서 점점 트래픽을 증가시키는 방식
    - AppSpec 파일을 생성하여, 이를 이용해 람다 함수 실행.
    - BeforeInstall -> Install -> AfterInstall -> AllowTestTraffic -> AfterAllowTestTraffic 
      -> BeforeAllowTraffic -> AllowTraffic -> AfterAllowTraffic -> Succeeded
3. 외부 배포 - 서드파티 배포 컨트롤러 사용

배포 최적화
각 컨테이너가 정상인지 확인하는 시간, 횟수를 줄여서 시간 단축 가능.
이전 테스크를 빠르게 정지시켜 시간 단축 가능
이미지 최적화, 이미지 풀 최적화
캐시된 컨테이너 사용
    - 파라미터 설정을 통해 이미지 풀링 조건 살정 가능.