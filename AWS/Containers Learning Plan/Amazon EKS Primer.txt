컨테이너 오케스트레이션
컨테이너를 관리하기 위한 서비스.
스케쥴링, 배치, 스케일 인/아웃, 보안, 로깅 등의 기능 제공

Amazon EKS
여러 가용 영역에서 쿠버네티스 제어 인프라를 만듬.
다른 aws 서비스와 통합
기존 쿠버네티스 환경에서 사용하던 플로그인과 도구 그대로 사용 가능. 완벽하게 호환(네이티브 업스트림)

쿠버네티스
포드 : 하나 이상의 컨테이너로 구성된 그룹. 컨테이너 실행 방법에 대한 사양인 PodSpec 파일에 의해 정의. 쿠버네티스 내 기본 빌딩 블록
    - 휘발성 볼륨: 공유 볼륨. 포드에서 데이터 공유
    - 영구 볼륨 : 포드와 무관한 수명 주기.
서비스 : 포드의 논리적 컬렉션. 포드에 액세스하기 위한 수단. 사용가능한 포드 세트를 바탕으로 지속적으로 업데이트.
노드 : 컨테이너를 포드에 그룹화하고 노드에 할당함으로서 워크로드 실행. 가상이거나 물리적 머신. 각 노드는 제어영역에서 관리.
클러스터 : 컨테이너화된 애플리케이션을 실행하는 노드라은 일련의 작업자 머신. 모든 클러스터에는 반드시 하나 이상의 작업자 노드 존재.
ReplicaSet: 언제든 주어진 시간에 특정 개수의 포드 복제본이 실행
배포 : ReplicaSet 또는 개별 포드를 소유하고 관리. 
ConfigMap : 포드와 같은 쿠버네티스 객체에서 사용하는 키-값으로 데이터를 저장하는 api 객체.


제어영역
컨트롤러 관리자 : 클러스터 이벤트를 감지하고 이에 대응하는 백그라운드 스레드(컨트롤러) 실행
클라우드 컨트롤러 : 클라우드 공급업체와 상호작용하는 특수 컨트롤러
스케줄러 : 새로 생성된 컨테이너가 실행될 노드 선택
api 서버 : 클러스터에서 제어 영역으로의 모든 통신.
etcd : 핵심 지속성 계층. 키-값 스토어. 중요한 클러스터 데이터와 상태 저장

데이터 영역
포드 : 컨테이너 그룹. 일시적인 엔티티.
도커 : 컨테이너 런타임 지원
kubelet : 올바른 컨테이너가 실행되도록 함
kube-proxy : 네트워킹


kubectl 를 통해 데이터 영역과 제어 영역  통신.
kubectl는 CLI


--------------------------------------------------
Amazon EKS 제어 영역
3개의 가용 영역에 걸친 최소 2개의 API 서버 노드.
3개의 etcd 로 구성.
비정상 제어 노드 자동 감지 교체.


EKS api : 관리하는 것 전부. 제어영역 포함(클러스터 생성 및 관리)
쿠버네티스 api : 포드, 배포, 네임스패이스같은 객체 관리.


---------------------------------------------------
Amazon EKS 데이터 영역

Fargate
인프라까지 관리해주는 서버리스 컨테이너 서비스
쿠버네티스 데이터 영역 전체 인프라를 관리.


----------------------------------------------------
aws 다른 서비스 이용

Amazon EKS 에서 AWS 인증
1. AWS api 사용
2. 쿠버네티스 api 사용

EKS 권한의 유형
1. 클러스터 IAM 역할
    - 클러스터를 관리하기 위해 AWS api 를 호출할수 있는 권한(ec2 오토스케일링 등)
2. 노드 IAM 역할
    - 작업자 노드의 kubelet 데몬이 사용자를 대신하여 aws api 를 호출할때, 작업자 노드가 IAM 을 통해 부여받는 권한
3. RBAC 사용자
    - 쿠버네티스 api 를 호출할 권한.


클러스터 생성
CLI 도구인 eksctl 사용 가능.

Kubernetes Cluster Autoscaler : 포드가 시작하지 못하는 경우 클러스터의 포드 수 자동 조정


Amazon EKS 통신
쿠버네티스용 Amazon VPC CNI(Container Network Interface) 플러그 인을 이용해 VPC 네트워킹을 쿠버네티스에 통합. 해당 포드 내에서 동일한 ip주소


서비스 :  포드의 논리적 모음이자 포드에 액세스하는 수단.
    - 두 포드가 통신중 하나의 포드가 사라지거나, ip 주소가 바뀌더라도 통신 가능.
    - 클러스터 ip 내부에 노드 포트가 생성. 노드 포트 내부에 로드 밸런서 생성. 모두 하나로 연결. ExternalName 서비스에서 외부 서비스 등록
로드 밸런서를 이용하여 외부에서 클러스터 액세스 가능.
노드 포트가 각 노드에서 포트를 열고, 모든 노드 앞에 로드 밸런서가 추가되어 노드 포트 확장.



----------------------------------


Amazon CloudWatch Container Insights : EKS 에서 지표 및 로그를 수집, 집계 및 시각화
    - 에이전트 필요


AWS App Mesh
서비스 모니터링 및 제어를 일련화.
마이크로 서비스 관리 도움

---------------------------

Amazon VPC CNI, kube-proxy, CoreDNS 는 기본적으로 모든 클러스터에 자동 추가됨.
추가기능 업데이트
1. AWS Management Console 를 사용하여 추가기능 설치
2. 구성 파일이 있는 eksctl 을 사용하여 추가 기능 설치

클러스터 업그레이드 이벤트 순서
1. api 서버 노드
2. 자동 롤백
3. 경미한 서비스 중단 발생 가능. (서브넷에 사용 가능한 ip 주소가 2~3개 필요)
4. 완료

자체 관리형 노드
    CloudFormation 또는 eksctl 및 kubectl 로 업그레이드
    노드를 새 ami 로 교체. 포드를 새 그룹으로 마이그레이션 권장.
관리형 노드 그룹
    AWS Management Console 또는 ekctl 로 업그레이드
Fargate
    자동 업그레이드


---------------------
비용

컴퓨팅 리소스 > 네트워킹 서비스 > EKS 클러스터 순으로 비용이 비쌈




하나도 이해가 안되서 정리가 안됨.....
