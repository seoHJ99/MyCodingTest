리전 고려사항
1. 규제 요구사항
2. 지연시간
3. 요금
4. 서비스 가용성

aws 와 상호작용
1. 콘솔
2. cli - 터미널
3. sdk - 에플리케이션, 개발 언어

공동책임모델
루트 사용자는 모든 권한이 있음으로 별도의 보호 조치가 필요. mfa 를 이용해 암호 이외의 다른 인증수단 추가.

IAM
권한 부여
iam 정책은 json 문자열 기반
그룹 정책 역할

----------------------------
aws 컴퓨팅
운영체제 선택  ami(amazon machine image) 선택
t1.small -> t1 : 이스턴스 유형 , small : 인스턴스 크기

인스턴스의 생명주기
1. 실행
2. 정지
3. 종료
종료 방지 기능 존재

aws 기반 컨테이너 서비스
컨테이너 : 어플리케이션을 실행하는데 필요한 모든 사항을 포함하고 있음
ecs(elastic container service)/ eks
컨테이너 오케스트레이션 도구 : 컨테이너를 관리, 모니터링, 시작, 재시작 등을 지원
fargate 서버리스 컨테이너 서비스

서버리스 컨테이너
fargate
-ecs와 eks 는 컨테이너를 관리할 뿐, 컴퓨팅에서 실행됨
-컨테너화된 어플 사용량에 대한 요금만 결제
-saving plans 제공
- 적절한 양의 컴퓨팅 할당

람다 서버리스
- 트리거로 작동하는 람다 함수와 코드를 올리면 됨
- 자동으로 크기가 조절되며 모든 유지 관리는 aws 가 수행
- 런타임이 15분 미만인 코드를 실행
- 빠른 처리에 유리
- 실행되는 시간만큼만 요금

적합한 컴퓨팅 서비스 선택
람다 - 자주 사용하지 않고 실행시간이 짧은 코드를 위한 시스템
ec2 - 일반적인 이용
컨테이너 서비스 - 서비스 중심 설걔. 코드 이동성. 오류 발생 가능성이 적음. 

--------------------------
네트워크

리전마다 기본 vpc 가 대신 생성됨.
그래도 vpc 에 들어갈 리ㅗㅅ스는 직접 선택

amazon vpc
vpc : 데이터 센터와 외부와의 경계
리전을 선택하고 vpc를 선택해야 함. vpc는 여러 가용영역에 걸쳐있으룻 있음
vpc 생성
1. 리전
2. ip 범위 cidr 방식으로 서브넷 지정

서브넷 생성
1. vpc
2. az 선택
3. 아이피 범위 선택

1. vpc 패널
2. 생성 클릭
3. az 선택
4. cidr 범위 선택
5. 새로운 서브넷 추가
6. 똑같이 설정하면서 cidr 로 ip 범위만 새롭게
7. 생성

인터넷 게이트웨이
1. 이름 만들고 만듬
2. attach 해서 vpc 와 연결함

vgw(virtual gate way) 를 이용해 특정 네트워크로만 연결 가능


vpc 라우팅
vpc 콘솔에서 라우팅 테이블 확인. 
기본 라우팅 테이블이 전체 vpc의 라우팅을 제어 .
기본 라우팅 테이블은 로컬 트래픽만 허용

트래픽을 특정 서브넷으로 라우팅하는 방법
특정 서브넷만 잇는 라우팅 테이블을 만들어서 서브넷에 부착해야함.
1. 라우팅 테이블 만들기
2. vpc 를 선택
3. 인터넷 게이트웨이에서 라우팅 테이블에 접근 가능하도록 라우팅 테이블 선택, edit routes 로 destination 을 모두 허용으로 바꿈.
4. subnet associations 탭에서 서브넷 추가하ㅗㄱ 저장

vpc 보안
acl : access control list - 기본적으로 모든 트래픽이 오고갈수 있음. 특정 트래픽만 오고갈수 있도록 설정 가능
보안그룹 : 필수 사항으로 항상 설정 필요. 인스턴스에 대해 적용됨. 모든 들어오는 요청을 막고 나가는 응답을 허용하는게 기본
- 상태를 기억하기에 ec2에 의해 시작한 것인지 외부에서 시작했는지 기억하고, 그에 맞춰 막혀있는 인바운드여도 트래픽을 염

 VPC를 생성하고 Amazon EC2에서 어플 시작
1. vpc 대시보드에서 vpc 생성 클릭
2. vpc 이름과 cidr 범위 선택
3. 서브넷 생성
4. 서브넷의 vpc를 서낵하고 가용영역과 cidr 을 선택
5. 프라이빗도 하나 더 만들어봄
6. 인터넷 게이트웨이 생성
7. 만들어진 인터넷 게이트웨이을 vpc 와 연결
8. 라우팅 테이블 생성
9. vpc와 연결
10. 모든 서브넷에서 오는 요청을 인터넷 게이트웨이와 허용하기 위해, 앞에서 만든 인터넷 게이트웨이와 연결
11. 라우팅 테이블을 알맞은 서브넷과 연결

--------------------------------------------------------------
스토리지
블록 스토리지 : 파일을 블록으로 나눠서 저장. 수정할시 해당 블록만 업데이트
객체 스토리지 : 파일을 한덩어리로 저장. 수정할시 전부 업데이트(WORM: 한번 쓰고 여러번 읽기)
EFS : 유동적으로 크기가 변하며 여러 컴퓨팅과 연결 가능. 생명주기 관리가 자동.  파일스토리지
FSX: 여러 파일 시스템으로 데이터를 관리할수 있는 기능

인스턴스 스토어와 블록 스토리지
인스턴스 스토어 : 한 인스턴스와 연결된 저장소. 빠르지만 인스턴스 정지/종료시 없어짐
EBS: 인스턴스와 별개로 유지되는 저장소. 연결하기 위해서는 반드시 ec2 가 필요. 다중연결이 불가능. 스냅샷으로 증분 백업됨.

객체 스토리지 연결 대상 s3
객체 스토리지 사용 이유
1. ebs 는 하나의 인스턴스에서만 사용
2. ebs 는 용량 한계가 작음
s3는 url을 통해 접근 가능. 분산 스토리지. 99.999.. 의 내구성
s3 데이터는 기본적으로 액세스 거부되고, 이를 허용해줘야 접근 가능함.
acl 과 연결해서 열어줄수 있음.
이를 위해서 permission 허락해줘야 함. 그리고 acl 을 사용.
s3 버킷 정책도 json 으로 이뤄지지만 s3에 대해서만 유효함.  버전관리 가능.
전환작업: 다른 스토리지 등급으로 전환
만료작업: 영구적으로 삭제

-------------------------------------------------------------------
데이터 베이스
RDS : 관계형 db 클라우드 서비스. 자동 장애 대응. 다중 az 배포를 하면 다른 가용 영역에 복사본을 만들어 장애에 자동으로 대응한다.
Aurora : aws 전용 db. 더 빠르다.

aws DynamoDB
키-값 쌍으로 저장되는 db.
nosql.
DocumentDB
콘텐츠관리, 카탈로그, 사용자 프로필 저장에 적합
mongoDB와 호환
Neptune
소셜네트워킹 추적 등에 유리
그래프
QLDB
은행 기록 등에 적절

DynamoDB
서버리스 데이터베이스
테이블은 모두 독립적
항목과 속성으로 저장됨.
응답이 밀리초
스키마와 sql 이 없음
데이터 유형이 자유로움
확장이 쉬움
해당 리전 여러 시설에 중복 저장됨

DynamoDB 구현
1. dynomoDB 로 이동하여 테이블 생성
2. 키를 정하고 테이블 생성
3. 데이터 저장
4. 인스턴스가 중지되더라도 유지

-------------------------------------------------------------
모니터링

CloudWatch
- 모니터링 서비스
- 대부분의 서비스가 자동으로 보고
- 서로 다른 리전이여도 보여줌
1. 대시보드 만들기
2. 추가할 위젯 선택
3. 확인
지표와 알람 설정 가능
트리거가 됨

ELB(로드밸런싱)
어플리케이션 계층 ALB | 네트워크 계층 NLB | 게이트웨이 GLB
ALB : 리스너-어떤 포트의 요청을 들을것인가, 대상그룹-어디로 보내줄 것인가
 - 리스너에 규칙을 따로 설정 가능
1. ec2에서 elb 를 설정 가능
2. 유형 선택
3. 내부용인지 외부용인지 선택
4. 트래픽을 라우팅할 가용영역 선택
5. 보안그룹 선택 - 어느 트래픽을 허용할지 정함
6.  리스너- 어느 요청을 들을건지 정함
7. 라우팅을 구성하기 위해 create target group 클릭
8. 새로 열리는 페이지에서 인스턴스가 될 대상 유형 선택
9. 생성한 뒤, 대상 그룹에 상주할 인스턴스 선택
10. 추가.
11. 다시 6의 페이지쪽으로 돌아와서 만들어진 그룹 선택
12. 시작
13. dns url 을 이용해 웹 접근 가능

오토스케일링
1. 런치 템플릿 생성
2. ec2의 auto scaling group 으로 가서 만든 런치 템플릭을 선택
3.  네트워크, 서브넷 선택
4. 로드 밸런스 부착할지 선택
5. elb 체크하여 인스턴스 상태가 정상인지 로드밸런스가 확인하도록 함
6. 최소 인스턴스와 최대 인스턴스, 실행하려는 인스턴스 설정
7. 스케일링 정책 설정. 즉, 언제 오토 스케일링 될것인지 설정. 트리거로 실행 가능
8. 스트레스 테스트를 통해 정상 작동 확인
elb 와 함께 사용됨. 인스턴스가 사용 가능한 상태인지 확인하는 것이


