클라우드 (인터넷, 온디멘드, 페이 에즈 유즈?)

AWS 공동 책임 모델 - 고객과 aws 가 함께 보안의 책임을 가짐.
aws: 인프라 시설, 클라우드의 보안 책임. 관리형 서비스.
고객 : 클라우드 내부의 보안 책임. 비관리형 서비스.

aws 보안 원칙
    - 자동화, 가시성, 감사 가능성, 민첩성, 제어 가능성

-----------------------------------------
액세스 및 권한 부여

IAM : 인증과 인가를 설정하는 서비스.
Authentication (인증) : 사용자가 유효한 사용자인지 체크
Authorization (인가) : 사용자의 권한이 어느정도인지 체크

IAM 구성요소 : 사용자, 그룹, 정책, 역할
account : 계정. 일반적으로 루트 계정을 말함. 모든 권한을 가짐.
user : 사용자. 제한된 권한.

account 를 여러개 사용하는 이점
    1. 계정 분리를 이용한 리소스 분리
    2. 예산 별도 할당

Group : 사용자만 포함. 그룹 내부 그룹은 불가능.

Policy : 정책. 권한을 설정. JSON.
    - 사용자 단위 권한 : 사용자에게 서비스 접근 권한을 줌.
        - Managed 방식: 1:n 방식. 재사용성. AWS 가 제공하는 방식과 커스텀 방식이 존재.
            **** AWS 관리 방식은 버전이 바뀌었을때 관리하기 힘듬. 원치 않는 권한이 허용될수도 있음. 다소 비권장 ****
        - Inline 방식: 1:1 방식. 일회성. 리소스가 삭제되면 같이 삭제됨. 특정 사용자에게만 일부 정책을 추가로 주기 위함.
    - 리소스 단위 권한 : sqs, s3, lambda, sns 등... 무조건 인라인 policy 로 작성됨.
    - 리소스와 사용자 둘다 권한이 허용되어 있어야 접근이 허락됨.

Role : 역할. 사용자, 리소스에 부여 가능. 그룹에 부여 불가능.
    - 일시적인 권한. 기한이 존재함.
    - 권한 정책과 신뢰 정책 설정 필수
        - 권한 정책 : Policy. 접근 할 수 있는 권한
        - 신뢰 정책 : 신뢰 관계. 역할을 부여받을수 있는 사용자 설정.
    - MFA 적용 가능
    - 서로 다른 account 간의 리소스 제어

역할의 동작 원리
 1. 사용자가 역할을 얻어서 리소스에 접근
 2. 역할이 STS 를 호출
 3. STS 가 accessKey 와 SecretKEY, 토큰을 생성.
 4. 해당 키를 이용해 리소스에 접근
 5. 매 접근마다 새로운 키 발급
STS 를 사용하는 대표적인 api
   assume role, assume role with SAML 등..  SAML : 이미 인증된 사용자를 재인증하지 않고 기존 인증정보로 AWS 서비스를 호출할때 사용
   GetSessionToken : MFA 인증을 받아와야 사용 가능한 api 를 사용하기 위한 api. 보안을 강제.
      리소스의 사용 policy 의 condition 에 MFA 인증 설정이 되어있을때.
        1. 먼저 GetSessionToken 을 통해서 인증.
        2. GetSessionToken 인증이 통과하면 새로운 accessKey 와 SecretKEY 를 발급
        3. 새로 발급받은 키로 MFA 인증이 필요한 api 작업
        * 이렇게 발급받은 키는 오직 mfa 인증이 필요한 api 작업에만 유효함.

권한(Policy)을 필터링 하는 방법
    - Permission boundary(권한 경계) : policy 에 condition 을 작성. 사용자가 가질수 있는 기존 권한에 제한을 주는 방식.
    - Session policy(세션 정책) : role 에 허락된 권한의 일부만 가질 수 있도록 제한을 주는 방식.

AWS Organizations 
계정을 관리하는 aws 서비스.
계정을 묶어서 관리 가능.
요금 계산의 편의성. 볼륨 디스카운트. 서비스 정책 제어(service control policy. SCP)(account 단위로 권한 부여. 루트 계정이 부여. 우선순위가 가장 높음).

Organizations 와 IAM 차이
Organizations:
    - 루트 레벨.
    - 계정에 적용
    - Organization
    - SCP
IAM:
    - 사용자에 적용
    - Group
    - policy

--------------------------------------------------

사용자 액세스 키 : 사용자마다 2개 생성 가능. 로테이션.
roleanywhere : 인증서 기반. aws 가 아닌 환경에서 role 을 이용해서 권한 받기 위한 기능
Excution Role(실행 역할) : 람다같은 서비스가 부여받는 역할
점핑 호스트 : 프라이빗과 연결된 외부 인터넷에 열린 호스트

--------------------------------------------------------

policy 의 구성
(필수)
1. effect : 허용인지 거부인지
2. Action : 특정 작업
3. resource : 구문에서 다루는 객체(서비스)
(선택)
4. condition : 정책이 적용되는 시점에 조건 적용
5. principal : 리소스 단위 권한에서만 지정. 접근 권한.

IAM 정책에는 AND 와 OR 조건이 가능

IAM 정책의 옵션
CalledVia : 특정 서비스에서 호출되는 경우에만 적용되도록 하는 정책 옵션.
NotResource :  Resource 옵션처럼 사용. 특정 리소스를 제외한 모든 객체에 Effect(허용/거부) 의 조건을 적용. 명시적 거부. 권장.
StringEquals : 태그 사용. {"키" : "값":} 처럼 특정 태그가 달린 리소스에만 정책 적용 가능.
NotPrincipal : principal 옵션처럼 사용. 특정 정책을 제외한 모든 정책을 거부.

정책 확인 순서
SCP -> 리소스 단위 정책 -> 사용자 단위 정책 -> 권한 경계 -> 세션 정책


CloudTrail : api 로그 기록. 역할 부여 역시 assume role 이라는 api 호출이기에 로그가 기록됨.
    - 수집과 저장. 로그의 무결성. 백업을 이용한 복구.
    - 로그를 기반으로 이벤트를 감지하는 것이 중요.
    - CloudWatch 의 Logs 로 보내서 필터, 알람 등의 기능 설정 가능
    - 콘솔 로그인같은 api 호출이 아닌 활동도 일부 저장

IAM Access Analyzer : 누가 언제 어떤 방식으로 접근하는지 분석하는 기능.


EC2 인스턴스 접근법
1. ID/PW : 비권장.
2. Keypair : 여러 인스턴스일때 관리가 힘듬. 키 분실시 곤란. SSH-Agent forwarding 방식을 사용하지만 이게 매우 복잡.
3. EC2 인스턴스 커넥트 : 리눅스만 지원. IAM Policy 와 에이전트가 필요.
4. SSH Manager : ssm agent 가 설치되어 있어야함. 최신 인스턴스엔 기본 설치. IAM policy 를 통해 ec2 접근 가능. 가시성 추적성 향상. os 명령어도 로깅 가능


계정
vpc : 하나의 계정 안에서 리소스 격리
서브넷 : vpc 내부에서 리소스 격리
계정 분리 > vpc 분리 > 서브넷 분리

계정분리
AWS Organizations : 계정을 생성하고 그룹화하여 관리하는 서비스
    - OU 가 하위 ou 를 가질수 있음. 최대 5개.


-----------------------------------------------
AWS ControlTower

거버넌스 : 통제, 제어.

1. 직접 Organizations 를 만들어 직접 ou를 만드는 방식

2. 랜딩존(Landing Zone) : AWS 에서 사람이 나와 대신 Organizations 와 같은 환경을 구축해주는 것.
    - 기본적인 템플릿이 존재하고 이를 베이스로 커스터마이징 함.
    - 대시보드가 없음.
    - 중단됨
    
3. ControlTower : 랜딩존 템플릿을 사용자가 직접 실행하여 커스텀할 수 있도록 도와주는 서비스.
    - 커스터마이징이 어려움. 프로서버팀 지원
    - 컨트롤이 존재
        - Pre??? : scp 가 이미 존재
        - Detective : AWS Config의 rule 이 이미 존재함
    
account Factory : 컨트롤 타워에서 계정을 생성하는 기능. 이렇게 생성된 계정은 컨트롤의 관리를 받음.

기본적으로 루트 OU 와 기본 ou 2개, 감사계정과 로그 계정이 생성됨.
aws 가 권장하는 모범사례로 세팅해준다고 보면 됨.

IAM Identity Center : 기존의 SSO 서비스. 다중 계정에서 사용. 하나의 인증 정보를 가지고 여러 계정간에 서비스를 공유 가능. 모든 서비스는 아님.
    - Permission set(권한 집합) : sso 내부에서 인증을 한 다음, 어떤 계정에 어떤 권한을 설정할지 정해야 하는데 이것을 Permission set 이라고 부름.
                       Role 베이스

aws 의 Active Directory 사용
1. Simple AD : aws 환경 내에서 ad 사용. 규모가 작음.
2. AD Connector : 기존에 존재하는 AD 를 AWS에 연결만 함. IAM Identity Center 와 연결 가능.
3. AWS Managed Microsoft AD : AWS 환경내에서 기존의 AD를 연결, 확장함.

AWS Cognito
실 사용자가 aws 를 사용할수 있도록 해주는 서비스. user pool 에 인증된 사용자에게 Identity pool 의 권한이 부여된 인증을 부여하여 aws 서비스 사용 가능.
적응형 인증, 즉, 해외 로그인시 추가 인증 같은 기능 존재.
Identity pool : 권한 처리. 인증된 사용자에게 어떤 권한을 줄지. 역할 기반. 
