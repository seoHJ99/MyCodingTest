쿠버네티스
이점 : 배포 환경과 운영 환경이 같음

컨테이너 오케스트레이션 도구
스케줄링, 스토리지, 네트워크, 로드 밸런싱, 모니터링, 보안 등을 관리

포드 : 쿠버네티스 내부에서 컨테이너를 배포하는 최소의 단위. 포드 안에 담아서 컨테이너를 배포함. 하나 이상의 컨테이너 그룹.

Pod 스팩 : 포드의 스펙을 정의. 서버, 포트, 이름 등을 정의

포드간 통신
각 포드에는 고유의 ip주소가 존재함. 포드들 중간에 중계기 역할을 하는 '서비스'가 존재. type 이 clusterIP 일때 로드밸런서처럼 작동.
서비스를 이용하여 포드간 통신. 덕분에 포드가 죽었다가 다시 실행되거나 ip 주소가 변해도 오류없이 통신 가능. 일종의 로드밸런서 역할도 함.
나갈때는 바로 자기 서비스 안거치고 상대 서비스로 직행.
하나의 서비스로 포트 번호를 달리해서 모든 포드를 처리할수도 있으나, 관리의 측면에서 너무 비효율적임


제어 영역과 데이터 영역
제어 영역 : 클러스터를 관리. EKS 에서 이를 대신해줌. 
데이터 영역 : 애플리케이션을 실행.

컨트롤러 - 제어 영역
지속적으로 사용자가 정의한 Desired State 와 현재 상태가 동일한지 확인하고, 다르다면 원하는 상태로 변경하는 기능.

API 서버 - 제어 영역
컨트롤러들과 통신하기 위한 기능.

etcd : 키 - 값 형태의 작은 저장 공간. 모든 클러스터의 상태를 저장하고 복제함.

컨테이너 런타임 - 데이터영역
Docker 와 같은 컨테이너 구동 프로그램.

kubelet - 데이터영역
데이터영역과 제어 영역의 통신을 담당

kube-proxy - 데이터 영역
포드간의 통신을 담당.


포드 스케쥴링
조건자와 우선순위를 이용해서 스케쥴링함.
조건자 : 제외할 부적격 노드를 결정
    - 포드의 리소스 요구사항을 분석. 적합한 노드를 결정.
    - Taint, Toleration. Taint 가 설정된 노드는 일치하는 Toleration 이 설정된 포드만 작동 가능.
    - affinity(선호도). required 와 preference 로 나뉨
    - required: 여러 사용가능한 노드가 존재하더라도 affinity 가 존재하면 해당 조건에 부합하는 노드에서만 작동.
    - preference : 가급적 조건에 해당하는 노드에서 작동. 조건에 부합하는 곳이 없으면 그냥 아무데서나.
    - 볼륨 요구사항. 영구적인 저장 장치가 필요한 경우.


kubectl 도구
사용자가 제어 영역과 통신하는 도구. api 서버와 연결됨.

------------------------------------
쿠버네티스 객체

네임스페이스 : 클러스터를 논리적으로 그룹화할때 네임스페이스로 나눈다.
    - 네임 스페이스의 구성원들의 이름은 모두 고유해야한다. 중복안됨.

ConfigMap : 환경 변수, 명령줄 인수같은 정보가 저장된 객체. 키-값.
Secret : 민감한 기밀정보가 저장된 쿠버네티스 객체.
- 중앙에 저장된 ConfigMap 을, 필요한 포드에서 mount 하는 방식으로 적용.

StatefulSet : 포드를 실행시키는 쿠버네티스 객체. 영구적인 볼륨을 사용하거나, 원본의 복제본처럼 먼저 원본 포드가 구동되어야 하는 경우처럼 순서가 중요한 경우
ReplicaSet : 포드를 실행시키는 쿠버네티스 객체.
Deployment : ReplicaSet 을 생성, 관리하기 위한 쿠버네티스 객체. 버전 교체 마이그레이션 작업을 도와줌.
DaemonSet : 노드에서 구동되는 관리 포드(로그 등)들을 실행, 제어하기 위한 쿠버네티스 객체.
CronJob : 주기적으로 정해진 시간에 포드가 구동되도록 하는 쿠버네티스 객체.
Job : 한번만 포드가 구동되도록 하는 쿠버네티스 객체.



----------------------------------
Amazon EKS
쿠버네티스의 제어 영역을 대신 관리해줌.

레지스트리 : 컨테이저가 저장되는 공간.

EKS 의 제어영역
쿠버네티스용 IAM Authenticator 을 이용해서 인증을 처리함.
API 서버와 etcd 는 EKS 가 관리하고, 사용자는 노드 등만 관리

EKS 의 데이터 영역
셀프매니지드 : 사용자가 모두 관리.
관리형 노드 그룹(반서버리스) : 프로비저닝 지원. 관리 지원. 업데이트 지원. eksctl 과 함께 작동
Fargate : 서버리스. 마이크로 VM. 적정 규모. 간단함. 최적화됨.
    - 쿠버네티스와 연동을 위해 Fargate 프로파일을 만듬. 포드가 Fargate 에서 실행됨을 뜻하기 위해.
    - 쿠버네티스에서 실행되는 포드는 Fargate 스케쥴러를 따름. 쿠버네티스 스케쥴러 x.
    - 한대에 하나의 포드만 가능.


컨테이너 실행 속도
EC2 > Fargate

EKS API : 클러스터의 인프라 관리
쿠버네티스 EKS : 클러스터 안에서 리소스 관리

-----------------------------------------------------------
실습1
probe : 활성 프로브와 준비 상태 프로브가 존재. 활성 상태는 현재 활성 상태인 포드가 몇개인지 확인. 준비 상태는 현재 준비중인 포드의 개수를 확인
------------------------------------------------------------

eksctl : 단일 명령으로 클러스터 생성 가능.
    - CloudFormation 템플릿 생성 -> 제어 영역, 데이터 영역 스택이 만들어짐 
    기본적으로 하는 일
      - 클러스터 및 노드의 IAM 역할 생성
      - 클러스터 및 노드 그룹 생성
      - 기본값으로 전용 vpc 생성
      - 클러스터의 kubeconfig 파일 생성


EKS 는 노드용 AMI 존재
EKS 최적화 리눅스 제공.

------------------------------------------
업그레이드

쿠버네티스는 3개월마다 버전업이 이뤄지기에 업그레이드에 대한 서비스가 필요.
eks 플랫폼 버전도 업그레이드가 일어날때마다 변하기에 옳바른 플랫폼을 사용해야 함.
업그레이드 도중 실패하면 자동 롤백
마이너 서비스가 중단될 가능성이 있음.
추가 기능들은 따로 업데이트 필요.

노드 업데이트
Fargate : 자동
Self-Managed 노드 : 사용자가 직접 해야함.
관리형 노드 : AWS Managed Console 또는 eksctl 을 통한 간편한 업그레이드.

----------------------------------------
배포

배포 크기 조정
1. 컨테이너 이미지 리포지토리(AWS ECR 등) 설정
2. 패키지 관리자(Helm 등) 또는 애플리케이션 배포 도구를 선택
3. CI/CD 파이프라인 자동화(AWS CodePipeline 등)

AWS ECR
아마존 컨테이너 이미지 레지스트리 서비스.
퍼블릭과 프라이빗으로 나뉨.
퍼블릭 : 인증 필요 없음. 오픈 소스. 커뮤니티 지향적. 공식 컨테이너 이미지.
프라이빗 : 인증. 독점적이고 권한. 보안. (역할기반 액세스 제어)
-고가용성
-IAM 통합
-취약성 스캐닝 가능
-암호화

ECR 이미지 스캐닝
기본
- Clair 사용. 오픈소스 이미지 스캐닝 솔루션 Chair
- 24시간마다 한번 

고급 
- Amazon Inspector 와 통합
- 이벤트를 Amazon EventBridge로 보냄


HELM 패키지 관리자
표준화되고 재사용 가능한 템플릿 생성
배포 오류 제거
애플리케이션 버전 관리
현재 위치에서 교환하는 방식으로 업그레이드`

HELM 차트 분석
차트 파일 : 배포하려는 모든 객체가 담겨있음. 일부 값은 사용자가 설정. 나머지는 알아서 생성
차트는 ECR, S3, 또는 Artifact HUB 에 저장 가능.