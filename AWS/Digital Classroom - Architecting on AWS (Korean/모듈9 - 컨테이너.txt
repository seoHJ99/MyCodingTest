------------------
마이크로 서비스

로드 밸런서르 통해 분리된 모습이 바람직한 사례
따라서 웹서버와 어플리케이션 서버를 분리하는 좋음.
모두 다른 컴퓨팅 서비스를 이용할수 있음. 즉, 관리, 변경이 쉬워짐.


------------------------
컨테이너

어플리케이션을 가장 간단하고 작은 구조로 패키징하는 것
환경 일관성 보장
vm보다 더 빠르고 독립적임
운영체제를 공유함
휴대성이 뛰어남. 이식, 확장 가능

오케스트레이션 도구 :수많은 인스턴스에서 컨테이너를 관리하는 도구
    - 스케줄링, 배치, 네트워킹, 모니터링이 가능




-----------------------
컨테이너 서비스
- 레지스트리
Amazon Elastic Container Registry(ECR) : 컨테이너 이미지를 푸시할수 있는 곳.
    - 특정 사용자만을 제한한는 등의 정책 작성 가능

- 오케스트레이션 도구
Amazon Elastic Kubernetes service(EKS) :
    - 오브젝트를 생성
    - 디플로이먼트(컨테이너가 어디에 있고 어디서 실행되길 원하는지 정의된 json) 를 생성
    - 가능하면 실행
    - 어디서든 실행 가능
    - 원하는 방식으로 설정 가능
    - 매우 추상적으로 설계되어 있어 자유도가 높음
    - eks 는 aws 에서 쿠버네티스를 실행하기 편하게 통합되어 있음.
    - Amazon EKS는 세 가용 영역에서 3개의 Kubernetes 관리자를 실행합니

Amazon Elastic Container service(ECS) : 컨테이너를 호스트에 배포
    - 컨테이너 배포, 생성, 실행 관리
    - 자동으로 확장
    - dns 레코드 생성 가능
    - aws 와 통합된 서비스. 로그를 볼수 있음.
    - 지속적인 통합, 배포가 쉬움
    - 클러스터 내에서 논리적으로 구성됨
    

- 컨테이너 호스팅
AWS Fargate : 서버리스 컨테이너 실행
    - aws 가 컨테이너 실행 호스트를 대신 관리
Amazon ec2 : 직접 실행