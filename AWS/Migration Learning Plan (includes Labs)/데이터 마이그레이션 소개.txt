AWS DMS
가장 기본적인 수준에서 마이그레이션을 실행하는 서비스.
테이블 및 연관된 기본키가 타겟에 없을 경우 dms 가 이러한 항목을 만듬

AWS SCT
데이터 엔진을 전환하려고 할때 스키마를 자동으로 변환하지 못하면 사용 가능한 서비스


--------------- 스키마 마이그레이션-----------------
1. 마이그레이션 구상 및 평가(AWS SCT)
sct를 이용해 변환 및 복잡도 계산.
붉은색일수록 복잡도가 높음.
자동 < 단순 < 보통 < 복잡함
21:20/1/0/0 처럼 나타냄.  이는 테이블 21개중 20개가 자동변환, 1개가 단순작업이라는 뜻

2. 데이터베이스 객체 변환
테이블, 인덱스, 제약 조건, 외래 키, 트리거 및 저장 프로시저 변환이 포함됨.
정확히 치환이 불가능하면 Database Migration 플레이북 을 이용하여 객체를 다시 코딩해야 할수도 있음.
Database Migration 플레이북: 이기종 마이그레이션을 위한 안내서
sct 확장팩을 이용해 함수를 에뮬레이트 할수도 있다. 먼저 스키마 변환 필요.

3단계: 애플리케이션 객체 변환
마이그레이션 프로세스의 가장 복잡한 측면.
파일 추가하여 sql 문 추출하고 변환, 적용

4단계: 스크립트 변환
변환하지 못할때는 이유를 주석으로 알려줌

5단계: 서드 파티 애플리케이션과의 통합


-----------------------데이터 마이그레이션(AWS DMS)----------------
6단계: 데이터 마이그레이션
소스에서 타겟으로 데이터 레코드를 이동하는 프로세스
AWS DMS를 사용하여 데이터베이스를 클라우드 지원 오픈 소스 엔진으로 현대화 가능
클라우드의 동일한 엔진으로 마이그레이션 가능
가용성을 높이기 위해 복제 가능
dms: 웹 서비스. db 둘중 하나가 aws 에 있어야 함.
소스에서 지속적인 트랜잭션을 마이그레이션하여 소스와 타겟을 동기화 가능
애플리케이션을 전환할 준비가 될 때까지 복제를 계속. 소스와 타겟을 무기한 동기화할 수 있습니다.

데이터 이동 방법
 전체 로드 마이그레이션 - 원본 데이터 로드
 지속적인 복제 - 트랜잭션 활성 소스 동기화
 이 둘의 조합
스키마나 테이블을 선택하고, 원하지 않는 데이터 레코드를 필터링하고, 특정 이름 지정 규칙에 맞게 이름을 변환
콘솔에서 진행률 확인.
dms 에서 마이그레이션 된 데이터 확인 가능

7단계: 전체 시스템 기능 테스트

8단계: 성능튜닝

9단계: 통합 및 배포

10단계: 교육 및 지식 전달
변경 사항이 문서화되었는지 확인
모니터링 및 페이징과 같은 새로운 환경을 관리하기 위한 기능도 개발

11단계: 버전 문서화 및 제어
시스템의 모든 변경 사항과 새 시스템의 작동 방식을 문서화

12단계: 프로덕션 후 지원 계획
 AWS CloudFormation 및 AWS Cloud Development Kit와 같은 도구 사용 가능
 