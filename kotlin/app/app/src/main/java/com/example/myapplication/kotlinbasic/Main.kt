package com.example.myapplication.kotlinbasic

fun main(){

}

// 정지함수 : suspend
// 해당 함수가 끝날때까지 기다려야함
// 일반적인 main 쓰레드 내부에서 호출 불가능.
// suspend는 다른 suspend 내부에서 실행 가능
// 또는 코루틴 스코프를 만들어서 코루틴으로 실행
// 안드로이드 환경에서는 이미 구현된 lifecycleScope 라는 라이브러리를 사용하면 되지만
// 그냥 일반 kotlin 환경에서는 android 컴포넌트가 없어서 사용 불가능.
// 직접 코루틴을 구현하던가 해야함.
suspend fun myFunc(callback: () -> Unit = {}) {
    println("함수 시작")
    callback()
    println("함수 끝")
}


// 코루틴
// 비동기 프로그래밍 개념
// 여러개의 쓰레드를 왔다 가며 실행되는 방식
// 코루틴 내부에서 suspend 키워드를 가진 함수를 만나면, 쓰레드는 해당 함수를 실행하며 그 아래 함수를 실행하지 않고 코루틴을 잠시 벗어난다.
// 이때, 쓰레드는 코루틴 밖의 다른 코드를 동시에 실행한다. 멀티 쓰레드나 동시성 프로그래밍 둘다 가능.
// 그리고 suspend 함수가 다 처리되면 다시 코루틴 내부로 돌아와 다음 코루틴 코드를 실행한다.
// 병렬은 양손으로 동시에 각각 다른 두개의 그림을 그리는 거라면, 코루틴은 왼손으로 찔끔 그리고 오른손으로 사람 하나 완성, 그리고 다시 왼손 찔끔
// 이런 식으로 진행되는 방식.
// 코루틴 내부의 함수들은 무조건 순서대로 진행되는게 보장된다.

